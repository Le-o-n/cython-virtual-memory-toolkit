/* Generated by Cython 0.29.33 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "C:\\Users\\Leon\\visual-studio\\repos\\Le-o-n\\cython-virtual-memory-toolkit\\cython-virtual-memory-toolkit\\src\\virtual_memory_toolkit\\handles\\handle.h",
            "C:\\Users\\Leon\\visual-studio\\repos\\Le-o-n\\cython-virtual-memory-toolkit\\cython-virtual-memory-toolkit\\src\\virtual_memory_toolkit\\process\\process.h",
            "C:\\Users\\Leon\\visual-studio\\repos\\Le-o-n\\cython-virtual-memory-toolkit\\cython-virtual-memory-toolkit\\src\\virtual_memory_toolkit\\windows\\windows_defs.h",
            "C:\\Users\\Leon\\visual-studio\\repos\\Le-o-n\\cython-virtual-memory-toolkit\\cython-virtual-memory-toolkit\\src\\virtual_memory_toolkit\\windows\\windows_types.h"
        ],
        "include_dirs": [
            "C:\\Users\\Leon\\visual-studio\\repos\\Le-o-n\\cython-virtual-memory-toolkit\\cython-virtual-memory-toolkit\\test",
            "C:\\Users\\Leon\\visual-studio\\repos\\Le-o-n\\cython-virtual-memory-toolkit\\cython-virtual-memory-toolkit\\src",
            "C:\\Users\\Leon\\visual-studio\\repos\\Le-o-n\\cython-virtual-memory-toolkit\\cython-virtual-memory-toolkit\\src\\virtual_memory_toolkit"
        ],
        "language": "c++",
        "libraries": [
            "user32",
            "kernel32"
        ],
        "name": "test.test_process",
        "sources": [
            "test/test_process.pyx"
        ]
    },
    "module_name": "test.test_process"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_33"
#define CYTHON_HEX_VERSION 0x001D21F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__test__test_process
#define __PYX_HAVE_API__test__test_process
/* Early includes */
#include <string.h>
#include <stdlib.h>
#include "Windows.h"
#include "virtual_memory_toolkit/windows/windows_types.h"
#include "tlhelp32.h"
#include "psapi.h"
#include "virtual_memory_toolkit/windows/windows_defs.h"
#include "virtual_memory_toolkit/handles/handle.h"
#include "virtual_memory_toolkit/process/process.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "test\\test_process.pyx",
  "windows_defs.pxd",
};
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()


/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_BOOL(BOOL value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_As_unsigned_PY_LONG_LONG(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'virtual_memory_toolkit.windows.windows_types' */

/* Module declarations from 'virtual_memory_toolkit.windows.windows_defs' */
static CYTHON_INLINE MODULEENTRY32 *__pyx_f_22virtual_memory_toolkit_7windows_12windows_defs_CollectAllModuleInformation(HANDLE); /*proto*/
static CYTHON_INLINE SIZE_T __pyx_f_22virtual_memory_toolkit_7windows_12windows_defs_PrivilagedMemoryRead(HANDLE, LPCVOID, LPVOID, SIZE_T); /*proto*/
static CYTHON_INLINE MEMORY_BASIC_INFORMATION *__pyx_f_22virtual_memory_toolkit_7windows_12windows_defs_GetMemoryRegionsInRange(HANDLE, LPCVOID, LPCVOID, unsigned PY_LONG_LONG *); /*proto*/
static CYTHON_INLINE BOOL __pyx_f_22virtual_memory_toolkit_7windows_12windows_defs__FindProcessFromWindowTitleSubstringCallback(HWND, LPARAM); /*proto*/
static CYTHON_INLINE FIND_PROCESS_LPARAM __pyx_f_22virtual_memory_toolkit_7windows_12windows_defs_FindProcessFromWindowTitleSubstring(char const *); /*proto*/

/* Module declarations from 'virtual_memory_toolkit.handles.handle' */
static CYTHON_INLINE CAppHandle *__pyx_f_22virtual_memory_toolkit_7handles_6handle_CAppHandle_from_title_substring(char const *); /*proto*/
static CYTHON_INLINE void __pyx_f_22virtual_memory_toolkit_7handles_6handle_CAppHandle_free(CAppHandle *); /*proto*/

/* Module declarations from 'virtual_memory_toolkit.process.process' */
static CYTHON_INLINE CProcess *__pyx_f_22virtual_memory_toolkit_7process_7process_CProcess_init(CAppHandle *); /*proto*/
static CYTHON_INLINE void __pyx_f_22virtual_memory_toolkit_7process_7process_CProcess_free(CProcess *); /*proto*/

/* Module declarations from 'test.test_process' */
static CAppHandle *__pyx_f_4test_12test_process_get_handle_to_notepad(void); /*proto*/
static CProcess *__pyx_f_4test_12test_process_create_notepad_cprocess(CAppHandle *); /*proto*/
static int __pyx_f_4test_12test_process_run(int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "test.test_process"
extern int __pyx_module_is_main_test__test_process;
int __pyx_module_is_main_test__test_process = 0;

/* Implementation of 'test.test_process' */
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_end[] = "end";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_Popen[] = "Popen";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_sleep[] = "sleep";
static const char __pyx_k_FAILED[] = "FAILED";
static const char __pyx_k_PASSED[] = "PASSED";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_terminate[] = "terminate";
static const char __pyx_k_subprocess[] = "subprocess";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_notepad_path[] = "notepad_path";
static const char __pyx_k_test_test_process[] = "test.test_process";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_Running_Process_Tests[] = "\n Running Process Tests ";
static const char __pyx_k_get_handle_to_notepad[] = "     - get_handle_to_notepad     ... ";
static const char __pyx_k_test_test_process_pyx[] = "test\\test_process.pyx";
static const char __pyx_k_create_notepad_cprocess[] = "     - create_notepad_cprocess   ... ";
static const char __pyx_k_create_notepad_instance[] = "create_notepad_instance";
static const char __pyx_k_C_Windows_System32_notepad_exe[] = "C:\\Windows\\System32\\notepad.exe";
static const char __pyx_k_Failed_to_allocate_modules_array[] = "Failed to allocate modules array";
static PyObject *__pyx_kp_s_C_Windows_System32_notepad_exe;
static PyObject *__pyx_n_s_FAILED;
static PyObject *__pyx_kp_s_Failed_to_allocate_modules_array;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_n_s_PASSED;
static PyObject *__pyx_n_s_Popen;
static PyObject *__pyx_kp_s_Running_Process_Tests;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_kp_s_create_notepad_cprocess;
static PyObject *__pyx_n_s_create_notepad_instance;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_kp_s_get_handle_to_notepad;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_notepad_path;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_sleep;
static PyObject *__pyx_n_s_subprocess;
static PyObject *__pyx_n_s_terminate;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_test_test_process;
static PyObject *__pyx_kp_s_test_test_process_pyx;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_pf_4test_12test_process_create_notepad_instance(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4test_12test_process_2run(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_int_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_codeobj__3;
/* Late includes */

/* "test/test_process.pyx":8
 * import time
 * 
 * def create_notepad_instance():             # <<<<<<<<<<<<<<
 *     """
 *     Creates a new instance of Notepad by opening it using the specified path.
 */

/* Python wrapper */
static PyObject *__pyx_pw_4test_12test_process_1create_notepad_instance(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4test_12test_process_create_notepad_instance[] = "\n    Creates a new instance of Notepad by opening it using the specified path.\n    ";
static PyMethodDef __pyx_mdef_4test_12test_process_1create_notepad_instance = {"create_notepad_instance", (PyCFunction)__pyx_pw_4test_12test_process_1create_notepad_instance, METH_NOARGS, __pyx_doc_4test_12test_process_create_notepad_instance};
static PyObject *__pyx_pw_4test_12test_process_1create_notepad_instance(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_notepad_instance (wrapper)", 0);
  __pyx_r = __pyx_pf_4test_12test_process_create_notepad_instance(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4test_12test_process_create_notepad_instance(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_v_notepad_path = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_notepad_instance", 0);

  /* "test/test_process.pyx":12
 *     Creates a new instance of Notepad by opening it using the specified path.
 *     """
 *     notepad_path = "C:\\Windows\\System32\\notepad.exe"             # <<<<<<<<<<<<<<
 *     return subprocess.Popen([notepad_path])
 * 
 */
  __Pyx_INCREF(__pyx_kp_s_C_Windows_System32_notepad_exe);
  __pyx_v_notepad_path = __pyx_kp_s_C_Windows_System32_notepad_exe;

  /* "test/test_process.pyx":13
 *     """
 *     notepad_path = "C:\\Windows\\System32\\notepad.exe"
 *     return subprocess.Popen([notepad_path])             # <<<<<<<<<<<<<<
 * 
 * cdef CAppHandle* get_handle_to_notepad():
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_subprocess); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Popen); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_notepad_path);
  __Pyx_GIVEREF(__pyx_v_notepad_path);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_v_notepad_path);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "test/test_process.pyx":8
 * import time
 * 
 * def create_notepad_instance():             # <<<<<<<<<<<<<<
 *     """
 *     Creates a new instance of Notepad by opening it using the specified path.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("test.test_process.create_notepad_instance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_notepad_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "test/test_process.pyx":15
 *     return subprocess.Popen([notepad_path])
 * 
 * cdef CAppHandle* get_handle_to_notepad():             # <<<<<<<<<<<<<<
 *     """
 *     Retrieves CAppHandle for Notepad instance.
 */

static CAppHandle *__pyx_f_4test_12test_process_get_handle_to_notepad(void) {
  char const *__pyx_v_notepad_title;
  CAppHandle *__pyx_v_app_handle;
  CAppHandle *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_handle_to_notepad", 0);

  /* "test/test_process.pyx":24
 *     """
 * 
 *     cdef const char* notepad_title = b"Notepad"             # <<<<<<<<<<<<<<
 * 
 *     cdef CAppHandle* app_handle = CAppHandle_from_title_substring(notepad_title)
 */
  __pyx_v_notepad_title = ((char const *)"Notepad");

  /* "test/test_process.pyx":26
 *     cdef const char* notepad_title = b"Notepad"
 * 
 *     cdef CAppHandle* app_handle = CAppHandle_from_title_substring(notepad_title)             # <<<<<<<<<<<<<<
 * 
 *     return app_handle
 */
  __pyx_v_app_handle = __pyx_f_22virtual_memory_toolkit_7handles_6handle_CAppHandle_from_title_substring(__pyx_v_notepad_title);

  /* "test/test_process.pyx":28
 *     cdef CAppHandle* app_handle = CAppHandle_from_title_substring(notepad_title)
 * 
 *     return app_handle             # <<<<<<<<<<<<<<
 * 
 * cdef CProcess* create_notepad_cprocess(CAppHandle* notepad_apphandle):
 */
  __pyx_r = __pyx_v_app_handle;
  goto __pyx_L0;

  /* "test/test_process.pyx":15
 *     return subprocess.Popen([notepad_path])
 * 
 * cdef CAppHandle* get_handle_to_notepad():             # <<<<<<<<<<<<<<
 *     """
 *     Retrieves CAppHandle for Notepad instance.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "test/test_process.pyx":30
 *     return app_handle
 * 
 * cdef CProcess* create_notepad_cprocess(CAppHandle* notepad_apphandle):             # <<<<<<<<<<<<<<
 *     """
 *     Creates a CProcess for the notepad instance.
 */

static CProcess *__pyx_f_4test_12test_process_create_notepad_cprocess(CAppHandle *__pyx_v_notepad_apphandle) {
  CProcess *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_notepad_cprocess", 0);

  /* "test/test_process.pyx":41
 *         NULL otherwise
 *     """
 *     return CProcess_init(notepad_apphandle)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_f_22virtual_memory_toolkit_7process_7process_CProcess_init(__pyx_v_notepad_apphandle);
  goto __pyx_L0;

  /* "test/test_process.pyx":30
 *     return app_handle
 * 
 * cdef CProcess* create_notepad_cprocess(CAppHandle* notepad_apphandle):             # <<<<<<<<<<<<<<
 *     """
 *     Creates a CProcess for the notepad instance.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "test/test_process.pyx":44
 * 
 * 
 * cpdef int run():             # <<<<<<<<<<<<<<
 *     print("\n Running Process Tests ")
 * 
 */

static PyObject *__pyx_pw_4test_12test_process_3run(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_4test_12test_process_run(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_notepad_process = NULL;
  int __pyx_v_error_count;
  CAppHandle *__pyx_v_notepad_apphandle;
  CProcess *__pyx_v_notepad_cprocess;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run", 0);

  /* "test/test_process.pyx":45
 * 
 * cpdef int run():
 *     print("\n Running Process Tests ")             # <<<<<<<<<<<<<<
 * 
 *     notepad_process = create_notepad_instance()
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_Running_Process_Tests) < 0) __PYX_ERR(0, 45, __pyx_L1_error)

  /* "test/test_process.pyx":47
 *     print("\n Running Process Tests ")
 * 
 *     notepad_process = create_notepad_instance()             # <<<<<<<<<<<<<<
 * 
 *     # Add a slight delay to ensure Notepad has time to open
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_create_notepad_instance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_notepad_process = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "test/test_process.pyx":50
 * 
 *     # Add a slight delay to ensure Notepad has time to open
 *     time.sleep(1)             # <<<<<<<<<<<<<<
 * 
 *     cdef int error_count = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sleep); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_int_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_int_1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "test/test_process.pyx":52
 *     time.sleep(1)
 * 
 *     cdef int error_count = 0             # <<<<<<<<<<<<<<
 *     cdef CAppHandle* notepad_apphandle = <CAppHandle*>0
 *     cdef CProcess* notepad_cprocess = <CProcess*>0
 */
  __pyx_v_error_count = 0;

  /* "test/test_process.pyx":53
 * 
 *     cdef int error_count = 0
 *     cdef CAppHandle* notepad_apphandle = <CAppHandle*>0             # <<<<<<<<<<<<<<
 *     cdef CProcess* notepad_cprocess = <CProcess*>0
 * 
 */
  __pyx_v_notepad_apphandle = ((CAppHandle *)0);

  /* "test/test_process.pyx":54
 *     cdef int error_count = 0
 *     cdef CAppHandle* notepad_apphandle = <CAppHandle*>0
 *     cdef CProcess* notepad_cprocess = <CProcess*>0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_notepad_cprocess = ((CProcess *)0);

  /* "test/test_process.pyx":57
 * 
 * 
 *     print("     - get_handle_to_notepad     ... ")             # <<<<<<<<<<<<<<
 *     notepad_apphandle = get_handle_to_notepad()
 *     if not notepad_apphandle:
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_get_handle_to_notepad) < 0) __PYX_ERR(0, 57, __pyx_L1_error)

  /* "test/test_process.pyx":58
 * 
 *     print("     - get_handle_to_notepad     ... ")
 *     notepad_apphandle = get_handle_to_notepad()             # <<<<<<<<<<<<<<
 *     if not notepad_apphandle:
 *         print("FAILED")
 */
  __pyx_v_notepad_apphandle = __pyx_f_4test_12test_process_get_handle_to_notepad();

  /* "test/test_process.pyx":59
 *     print("     - get_handle_to_notepad     ... ")
 *     notepad_apphandle = get_handle_to_notepad()
 *     if not notepad_apphandle:             # <<<<<<<<<<<<<<
 *         print("FAILED")
 *         error_count += 1
 */
  __pyx_t_4 = ((!(__pyx_v_notepad_apphandle != 0)) != 0);
  if (__pyx_t_4) {

    /* "test/test_process.pyx":60
 *     notepad_apphandle = get_handle_to_notepad()
 *     if not notepad_apphandle:
 *         print("FAILED")             # <<<<<<<<<<<<<<
 *         error_count += 1
 *     else:
 */
    if (__Pyx_PrintOne(0, __pyx_n_s_FAILED) < 0) __PYX_ERR(0, 60, __pyx_L1_error)

    /* "test/test_process.pyx":61
 *     if not notepad_apphandle:
 *         print("FAILED")
 *         error_count += 1             # <<<<<<<<<<<<<<
 *     else:
 *         print("PASSED")
 */
    __pyx_v_error_count = (__pyx_v_error_count + 1);

    /* "test/test_process.pyx":59
 *     print("     - get_handle_to_notepad     ... ")
 *     notepad_apphandle = get_handle_to_notepad()
 *     if not notepad_apphandle:             # <<<<<<<<<<<<<<
 *         print("FAILED")
 *         error_count += 1
 */
    goto __pyx_L3;
  }

  /* "test/test_process.pyx":63
 *         error_count += 1
 *     else:
 *         print("PASSED")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_n_s_PASSED) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "test/test_process.pyx":66
 * 
 * 
 *     print("     - create_notepad_cprocess   ... ")             # <<<<<<<<<<<<<<
 *     if notepad_apphandle:
 *         notepad_cprocess = create_notepad_cprocess(notepad_apphandle)
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_create_notepad_cprocess) < 0) __PYX_ERR(0, 66, __pyx_L1_error)

  /* "test/test_process.pyx":67
 * 
 *     print("     - create_notepad_cprocess   ... ")
 *     if notepad_apphandle:             # <<<<<<<<<<<<<<
 *         notepad_cprocess = create_notepad_cprocess(notepad_apphandle)
 *         if not notepad_cprocess:
 */
  __pyx_t_4 = (__pyx_v_notepad_apphandle != 0);
  if (__pyx_t_4) {

    /* "test/test_process.pyx":68
 *     print("     - create_notepad_cprocess   ... ")
 *     if notepad_apphandle:
 *         notepad_cprocess = create_notepad_cprocess(notepad_apphandle)             # <<<<<<<<<<<<<<
 *         if not notepad_cprocess:
 *             print("FAILED")
 */
    __pyx_v_notepad_cprocess = __pyx_f_4test_12test_process_create_notepad_cprocess(__pyx_v_notepad_apphandle);

    /* "test/test_process.pyx":69
 *     if notepad_apphandle:
 *         notepad_cprocess = create_notepad_cprocess(notepad_apphandle)
 *         if not notepad_cprocess:             # <<<<<<<<<<<<<<
 *             print("FAILED")
 *             error_count += 1
 */
    __pyx_t_4 = ((!(__pyx_v_notepad_cprocess != 0)) != 0);
    if (__pyx_t_4) {

      /* "test/test_process.pyx":70
 *         notepad_cprocess = create_notepad_cprocess(notepad_apphandle)
 *         if not notepad_cprocess:
 *             print("FAILED")             # <<<<<<<<<<<<<<
 *             error_count += 1
 *         else:
 */
      if (__Pyx_PrintOne(0, __pyx_n_s_FAILED) < 0) __PYX_ERR(0, 70, __pyx_L1_error)

      /* "test/test_process.pyx":71
 *         if not notepad_cprocess:
 *             print("FAILED")
 *             error_count += 1             # <<<<<<<<<<<<<<
 *         else:
 *             print("PASSED")
 */
      __pyx_v_error_count = (__pyx_v_error_count + 1);

      /* "test/test_process.pyx":69
 *     if notepad_apphandle:
 *         notepad_cprocess = create_notepad_cprocess(notepad_apphandle)
 *         if not notepad_cprocess:             # <<<<<<<<<<<<<<
 *             print("FAILED")
 *             error_count += 1
 */
      goto __pyx_L5;
    }

    /* "test/test_process.pyx":73
 *             error_count += 1
 *         else:
 *             print("PASSED")             # <<<<<<<<<<<<<<
 *     else:
 *         print("FAILED")
 */
    /*else*/ {
      if (__Pyx_PrintOne(0, __pyx_n_s_PASSED) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
    }
    __pyx_L5:;

    /* "test/test_process.pyx":67
 * 
 *     print("     - create_notepad_cprocess   ... ")
 *     if notepad_apphandle:             # <<<<<<<<<<<<<<
 *         notepad_cprocess = create_notepad_cprocess(notepad_apphandle)
 *         if not notepad_cprocess:
 */
    goto __pyx_L4;
  }

  /* "test/test_process.pyx":75
 *             print("PASSED")
 *     else:
 *         print("FAILED")             # <<<<<<<<<<<<<<
 *         error_count += 1
 * 
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_n_s_FAILED) < 0) __PYX_ERR(0, 75, __pyx_L1_error)

    /* "test/test_process.pyx":76
 *     else:
 *         print("FAILED")
 *         error_count += 1             # <<<<<<<<<<<<<<
 * 
 *     if notepad_cprocess:
 */
    __pyx_v_error_count = (__pyx_v_error_count + 1);
  }
  __pyx_L4:;

  /* "test/test_process.pyx":78
 *         error_count += 1
 * 
 *     if notepad_cprocess:             # <<<<<<<<<<<<<<
 *         CProcess_free(notepad_cprocess)
 *     if notepad_apphandle:
 */
  __pyx_t_4 = (__pyx_v_notepad_cprocess != 0);
  if (__pyx_t_4) {

    /* "test/test_process.pyx":79
 * 
 *     if notepad_cprocess:
 *         CProcess_free(notepad_cprocess)             # <<<<<<<<<<<<<<
 *     if notepad_apphandle:
 *         CAppHandle_free(notepad_apphandle)
 */
    __pyx_f_22virtual_memory_toolkit_7process_7process_CProcess_free(__pyx_v_notepad_cprocess);

    /* "test/test_process.pyx":78
 *         error_count += 1
 * 
 *     if notepad_cprocess:             # <<<<<<<<<<<<<<
 *         CProcess_free(notepad_cprocess)
 *     if notepad_apphandle:
 */
  }

  /* "test/test_process.pyx":80
 *     if notepad_cprocess:
 *         CProcess_free(notepad_cprocess)
 *     if notepad_apphandle:             # <<<<<<<<<<<<<<
 *         CAppHandle_free(notepad_apphandle)
 *     notepad_process.terminate()
 */
  __pyx_t_4 = (__pyx_v_notepad_apphandle != 0);
  if (__pyx_t_4) {

    /* "test/test_process.pyx":81
 *         CProcess_free(notepad_cprocess)
 *     if notepad_apphandle:
 *         CAppHandle_free(notepad_apphandle)             # <<<<<<<<<<<<<<
 *     notepad_process.terminate()
 *     return error_count
 */
    __pyx_f_22virtual_memory_toolkit_7handles_6handle_CAppHandle_free(__pyx_v_notepad_apphandle);

    /* "test/test_process.pyx":80
 *     if notepad_cprocess:
 *         CProcess_free(notepad_cprocess)
 *     if notepad_apphandle:             # <<<<<<<<<<<<<<
 *         CAppHandle_free(notepad_apphandle)
 *     notepad_process.terminate()
 */
  }

  /* "test/test_process.pyx":82
 *     if notepad_apphandle:
 *         CAppHandle_free(notepad_apphandle)
 *     notepad_process.terminate()             # <<<<<<<<<<<<<<
 *     return error_count
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_notepad_process, __pyx_n_s_terminate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "test/test_process.pyx":83
 *         CAppHandle_free(notepad_apphandle)
 *     notepad_process.terminate()
 *     return error_count             # <<<<<<<<<<<<<<
 */
  __pyx_r = __pyx_v_error_count;
  goto __pyx_L0;

  /* "test/test_process.pyx":44
 * 
 * 
 * cpdef int run():             # <<<<<<<<<<<<<<
 *     print("\n Running Process Tests ")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("test.test_process.run", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_notepad_process);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4test_12test_process_3run(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_4test_12test_process_3run(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  __pyx_r = __pyx_pf_4test_12test_process_2run(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4test_12test_process_2run(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_4test_12test_process_run(0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("test.test_process.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "virtual_memory_toolkit/windows/windows_defs.pxd":70
 * 
 * 
 * cdef inline MODULEENTRY32* CollectAllModuleInformation(HANDLE snapshot_handle) nogil:             # <<<<<<<<<<<<<<
 *     cdef MODULEENTRY32 me32
 *     cdef BOOL result
 */

static CYTHON_INLINE MODULEENTRY32 *__pyx_f_22virtual_memory_toolkit_7windows_12windows_defs_CollectAllModuleInformation(HANDLE __pyx_v_snapshot_handle) {
  MODULEENTRY32 __pyx_v_me32;
  BOOL __pyx_v_result;
  int __pyx_v_count;
  MODULEENTRY32 *__pyx_v_modules;
  MODULEENTRY32 *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_RefNannySetupContext("CollectAllModuleInformation", 1);

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":71
 * 
 * cdef inline MODULEENTRY32* CollectAllModuleInformation(HANDLE snapshot_handle) nogil:
 *     cdef MODULEENTRY32 me32             # <<<<<<<<<<<<<<
 *     cdef BOOL result
 *     cdef int count = 0
 */
  /*try:*/ {

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":73
 *     cdef MODULEENTRY32 me32
 *     cdef BOOL result
 *     cdef int count = 0             # <<<<<<<<<<<<<<
 *     cdef MODULEENTRY32* modules = <MODULEENTRY32*>calloc(MAX_MODULES, sizeof(MODULEENTRY32))
 * 
 */
    __pyx_v_count = 0;

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":74
 *     cdef BOOL result
 *     cdef int count = 0
 *     cdef MODULEENTRY32* modules = <MODULEENTRY32*>calloc(MAX_MODULES, sizeof(MODULEENTRY32))             # <<<<<<<<<<<<<<
 * 
 *     if not modules:
 */
    __pyx_v_modules = ((MODULEENTRY32 *)calloc(MAX_MODULES, (sizeof(MODULEENTRY32))));

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":76
 *     cdef MODULEENTRY32* modules = <MODULEENTRY32*>calloc(MAX_MODULES, sizeof(MODULEENTRY32))
 * 
 *     if not modules:             # <<<<<<<<<<<<<<
 *         with gil:
 *             raise MemoryError("Failed to allocate modules array")
 */
    __pyx_t_1 = ((!(__pyx_v_modules != 0)) != 0);
    if (__pyx_t_1) {

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":77
 * 
 *     if not modules:
 *         with gil:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Failed to allocate modules array")
 * 
 */
      {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          /*try:*/ {

            /* "virtual_memory_toolkit/windows/windows_defs.pxd":78
 *     if not modules:
 *         with gil:
 *             raise MemoryError("Failed to allocate modules array")             # <<<<<<<<<<<<<<
 * 
 *     me32.dwSize = sizeof(MODULEENTRY32)
 */
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 78, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_Raise(__pyx_t_2, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __PYX_ERR(1, 78, __pyx_L8_error)
          }

          /* "virtual_memory_toolkit/windows/windows_defs.pxd":77
 * 
 *     if not modules:
 *         with gil:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Failed to allocate modules array")
 * 
 */
          /*finally:*/ {
            __pyx_L8_error: {
              #ifdef WITH_THREAD
              __Pyx_PyGILState_Release(__pyx_gilstate_save);
              #endif
              goto __pyx_L4_error;
            }
          }
      }

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":76
 *     cdef MODULEENTRY32* modules = <MODULEENTRY32*>calloc(MAX_MODULES, sizeof(MODULEENTRY32))
 * 
 *     if not modules:             # <<<<<<<<<<<<<<
 *         with gil:
 *             raise MemoryError("Failed to allocate modules array")
 */
    }

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":80
 *             raise MemoryError("Failed to allocate modules array")
 * 
 *     me32.dwSize = sizeof(MODULEENTRY32)             # <<<<<<<<<<<<<<
 *     result = Module32First(snapshot_handle, &me32)
 * 
 */
    __pyx_v_me32.dwSize = (sizeof(MODULEENTRY32));

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":81
 * 
 *     me32.dwSize = sizeof(MODULEENTRY32)
 *     result = Module32First(snapshot_handle, &me32)             # <<<<<<<<<<<<<<
 * 
 *     while result and count < MAX_MODULES:
 */
    __pyx_v_result = Module32First(__pyx_v_snapshot_handle, (&__pyx_v_me32));

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":83
 *     result = Module32First(snapshot_handle, &me32)
 * 
 *     while result and count < MAX_MODULES:             # <<<<<<<<<<<<<<
 *         memcpy(&modules[count], &me32, sizeof(MODULEENTRY32))  # Copy structure
 * 
 */
    while (1) {
      __pyx_t_3 = (__pyx_v_result != 0);
      if (__pyx_t_3) {
      } else {
        __pyx_t_1 = __pyx_t_3;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_3 = ((__pyx_v_count < MAX_MODULES) != 0);
      __pyx_t_1 = __pyx_t_3;
      __pyx_L12_bool_binop_done:;
      if (!__pyx_t_1) break;

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":84
 * 
 *     while result and count < MAX_MODULES:
 *         memcpy(&modules[count], &me32, sizeof(MODULEENTRY32))  # Copy structure             # <<<<<<<<<<<<<<
 * 
 *         count += 1
 */
      (void)(memcpy((&(__pyx_v_modules[__pyx_v_count])), (&__pyx_v_me32), (sizeof(MODULEENTRY32))));

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":86
 *         memcpy(&modules[count], &me32, sizeof(MODULEENTRY32))  # Copy structure
 * 
 *         count += 1             # <<<<<<<<<<<<<<
 *         result = Module32Next(snapshot_handle, &me32)
 * 
 */
      __pyx_v_count = (__pyx_v_count + 1);

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":87
 * 
 *         count += 1
 *         result = Module32Next(snapshot_handle, &me32)             # <<<<<<<<<<<<<<
 * 
 *     return modules
 */
      __pyx_v_result = Module32Next(__pyx_v_snapshot_handle, (&__pyx_v_me32));
    }

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":89
 *         result = Module32Next(snapshot_handle, &me32)
 * 
 *     return modules             # <<<<<<<<<<<<<<
 * 
 * cdef inline SIZE_T PrivilagedMemoryRead(HANDLE process_handle, LPCVOID base_address, LPVOID out_read_buffer, SIZE_T number_of_bytes) nogil:
 */
    __pyx_r = __pyx_v_modules;
    goto __pyx_L3_return;
  }

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":71
 * 
 * cdef inline MODULEENTRY32* CollectAllModuleInformation(HANDLE snapshot_handle) nogil:
 *     cdef MODULEENTRY32 me32             # <<<<<<<<<<<<<<
 *     cdef BOOL result
 *     cdef int count = 0
 */
  /*finally:*/ {
    __pyx_L3_return: {
      #ifdef WITH_THREAD
      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      goto __pyx_L0;
    }
    __pyx_L4_error: {
      #ifdef WITH_THREAD
      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      goto __pyx_L1_error;
    }
  }

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":70
 * 
 * 
 * cdef inline MODULEENTRY32* CollectAllModuleInformation(HANDLE snapshot_handle) nogil:             # <<<<<<<<<<<<<<
 *     cdef MODULEENTRY32 me32
 *     cdef BOOL result
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("virtual_memory_toolkit.windows.windows_defs.CollectAllModuleInformation", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "virtual_memory_toolkit/windows/windows_defs.pxd":91
 *     return modules
 * 
 * cdef inline SIZE_T PrivilagedMemoryRead(HANDLE process_handle, LPCVOID base_address, LPVOID out_read_buffer, SIZE_T number_of_bytes) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Reads memory from a specified address in a process's virtual memory, adjusting page protection as necessary.
 */

static CYTHON_INLINE SIZE_T __pyx_f_22virtual_memory_toolkit_7windows_12windows_defs_PrivilagedMemoryRead(HANDLE __pyx_v_process_handle, LPCVOID __pyx_v_base_address, LPVOID __pyx_v_out_read_buffer, SIZE_T __pyx_v_number_of_bytes) {
  MEMORY_BASIC_INFORMATION __pyx_v_mbi;
  DWORD __pyx_v_old_page_protection;
  int __pyx_v_changed_page_protection;
  SIZE_T __pyx_v_read_bytes;
  SIZE_T __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":105
 *     """
 *     cdef MEMORY_BASIC_INFORMATION mbi
 *     if VirtualQueryEx(process_handle, base_address, &mbi, sizeof(mbi)) == 0:             # <<<<<<<<<<<<<<
 *         return 0  # Failed to query memory information
 * 
 */
  __pyx_t_1 = ((VirtualQueryEx(__pyx_v_process_handle, __pyx_v_base_address, (&__pyx_v_mbi), (sizeof(__pyx_v_mbi))) == 0) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":106
 *     cdef MEMORY_BASIC_INFORMATION mbi
 *     if VirtualQueryEx(process_handle, base_address, &mbi, sizeof(mbi)) == 0:
 *         return 0  # Failed to query memory information             # <<<<<<<<<<<<<<
 * 
 *     if mbi.State != MEM_COMMIT or mbi.Protect == PAGE_NOACCESS:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":105
 *     """
 *     cdef MEMORY_BASIC_INFORMATION mbi
 *     if VirtualQueryEx(process_handle, base_address, &mbi, sizeof(mbi)) == 0:             # <<<<<<<<<<<<<<
 *         return 0  # Failed to query memory information
 * 
 */
  }

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":108
 *         return 0  # Failed to query memory information
 * 
 *     if mbi.State != MEM_COMMIT or mbi.Protect == PAGE_NOACCESS:             # <<<<<<<<<<<<<<
 *         return 0  # Memory is not committed or is marked as no access
 * 
 */
  __pyx_t_2 = ((__pyx_v_mbi.State != MEM_COMMIT) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_mbi.Protect == PAGE_NOACCESS) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":109
 * 
 *     if mbi.State != MEM_COMMIT or mbi.Protect == PAGE_NOACCESS:
 *         return 0  # Memory is not committed or is marked as no access             # <<<<<<<<<<<<<<
 * 
 *     cdef DWORD old_page_protection
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":108
 *         return 0  # Failed to query memory information
 * 
 *     if mbi.State != MEM_COMMIT or mbi.Protect == PAGE_NOACCESS:             # <<<<<<<<<<<<<<
 *         return 0  # Memory is not committed or is marked as no access
 * 
 */
  }

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":114
 *     cdef bint changed_page_protection
 * 
 *     changed_page_protection = VirtualProtectEx(             # <<<<<<<<<<<<<<
 *         process_handle,
 *         <LPVOID>base_address,
 */
  __pyx_v_changed_page_protection = VirtualProtectEx(__pyx_v_process_handle, ((LPVOID)__pyx_v_base_address), __pyx_v_number_of_bytes, PAGE_EXECUTE_READWRITE, (&__pyx_v_old_page_protection));

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":122
 *     )
 * 
 *     if not changed_page_protection:             # <<<<<<<<<<<<<<
 *         return 0  # Failed to change page protection
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_changed_page_protection != 0)) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":123
 * 
 *     if not changed_page_protection:
 *         return 0  # Failed to change page protection             # <<<<<<<<<<<<<<
 * 
 *     cdef SIZE_T read_bytes = 0
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":122
 *     )
 * 
 *     if not changed_page_protection:             # <<<<<<<<<<<<<<
 *         return 0  # Failed to change page protection
 * 
 */
  }

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":125
 *         return 0  # Failed to change page protection
 * 
 *     cdef SIZE_T read_bytes = 0             # <<<<<<<<<<<<<<
 *     if not ReadProcessMemory(
 *         process_handle,
 */
  __pyx_v_read_bytes = 0;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":126
 * 
 *     cdef SIZE_T read_bytes = 0
 *     if not ReadProcessMemory(             # <<<<<<<<<<<<<<
 *         process_handle,
 *         base_address,
 */
  __pyx_t_1 = ((!(ReadProcessMemory(__pyx_v_process_handle, __pyx_v_base_address, __pyx_v_out_read_buffer, __pyx_v_number_of_bytes, (&__pyx_v_read_bytes)) != 0)) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":134
 *     ):
 *         # Restore the original page protection before returning
 *         VirtualProtectEx(             # <<<<<<<<<<<<<<
 *             process_handle,
 *             <LPVOID>base_address,
 */
    (void)(VirtualProtectEx(__pyx_v_process_handle, ((LPVOID)__pyx_v_base_address), __pyx_v_number_of_bytes, __pyx_v_old_page_protection, (&__pyx_v_old_page_protection)));

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":141
 *             &old_page_protection
 *         )
 *         return 0  # Failed to read memory             # <<<<<<<<<<<<<<
 * 
 *     # Restore the original page protection
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":126
 * 
 *     cdef SIZE_T read_bytes = 0
 *     if not ReadProcessMemory(             # <<<<<<<<<<<<<<
 *         process_handle,
 *         base_address,
 */
  }

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":144
 * 
 *     # Restore the original page protection
 *     changed_page_protection = VirtualProtectEx(             # <<<<<<<<<<<<<<
 *         process_handle,
 *         <LPVOID>base_address,
 */
  __pyx_v_changed_page_protection = VirtualProtectEx(__pyx_v_process_handle, ((LPVOID)__pyx_v_base_address), __pyx_v_number_of_bytes, __pyx_v_old_page_protection, (&__pyx_v_old_page_protection));

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":152
 *     )
 * 
 *     if not changed_page_protection:             # <<<<<<<<<<<<<<
 *         return 0  # Failed to restore page protection
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_changed_page_protection != 0)) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":153
 * 
 *     if not changed_page_protection:
 *         return 0  # Failed to restore page protection             # <<<<<<<<<<<<<<
 * 
 *     return read_bytes
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":152
 *     )
 * 
 *     if not changed_page_protection:             # <<<<<<<<<<<<<<
 *         return 0  # Failed to restore page protection
 * 
 */
  }

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":155
 *         return 0  # Failed to restore page protection
 * 
 *     return read_bytes             # <<<<<<<<<<<<<<
 * 
 * cdef inline SIZE_T PrivilagedMemoryWrite(HANDLE process_handle, LPCVOID base_address, LPCVOID write_buffer, SIZE_T number_of_bytes) nogil:
 */
  __pyx_r = __pyx_v_read_bytes;
  goto __pyx_L0;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":91
 *     return modules
 * 
 * cdef inline SIZE_T PrivilagedMemoryRead(HANDLE process_handle, LPCVOID base_address, LPVOID out_read_buffer, SIZE_T number_of_bytes) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Reads memory from a specified address in a process's virtual memory, adjusting page protection as necessary.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "virtual_memory_toolkit/windows/windows_defs.pxd":157
 *     return read_bytes
 * 
 * cdef inline SIZE_T PrivilagedMemoryWrite(HANDLE process_handle, LPCVOID base_address, LPCVOID write_buffer, SIZE_T number_of_bytes) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Writes memory to a specified address in a process's virtual memory, adjusting page protection as necessary.
 */

static CYTHON_INLINE SIZE_T __pyx_f_22virtual_memory_toolkit_7windows_12windows_defs_PrivilagedMemoryWrite(HANDLE __pyx_v_process_handle, LPCVOID __pyx_v_base_address, LPCVOID __pyx_v_write_buffer, SIZE_T __pyx_v_number_of_bytes) {
  DWORD __pyx_v_old_page_protection;
  int __pyx_v_changed_page_protection;
  SIZE_T __pyx_v_written_bytes;
  SIZE_T __pyx_r;
  int __pyx_t_1;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":173
 *     cdef bint changed_page_protection
 * 
 *     changed_page_protection = VirtualProtectEx(             # <<<<<<<<<<<<<<
 *         process_handle,
 *         <LPVOID>base_address,
 */
  __pyx_v_changed_page_protection = VirtualProtectEx(__pyx_v_process_handle, ((LPVOID)__pyx_v_base_address), __pyx_v_number_of_bytes, PAGE_EXECUTE_READWRITE, (&__pyx_v_old_page_protection));

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":181
 *     )
 * 
 *     if not changed_page_protection:             # <<<<<<<<<<<<<<
 *         return 0  # Failed to change page protection
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_changed_page_protection != 0)) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":182
 * 
 *     if not changed_page_protection:
 *         return 0  # Failed to change page protection             # <<<<<<<<<<<<<<
 * 
 *     cdef SIZE_T written_bytes = 0
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":181
 *     )
 * 
 *     if not changed_page_protection:             # <<<<<<<<<<<<<<
 *         return 0  # Failed to change page protection
 * 
 */
  }

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":184
 *         return 0  # Failed to change page protection
 * 
 *     cdef SIZE_T written_bytes = 0             # <<<<<<<<<<<<<<
 *     if not WriteProcessMemory(
 *         process_handle,
 */
  __pyx_v_written_bytes = 0;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":185
 * 
 *     cdef SIZE_T written_bytes = 0
 *     if not WriteProcessMemory(             # <<<<<<<<<<<<<<
 *         process_handle,
 *         <LPVOID>base_address,
 */
  __pyx_t_1 = ((!(WriteProcessMemory(__pyx_v_process_handle, ((LPVOID)__pyx_v_base_address), __pyx_v_write_buffer, __pyx_v_number_of_bytes, (&__pyx_v_written_bytes)) != 0)) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":193
 *     ):
 *         # Restore the original page protection before returning
 *         VirtualProtectEx(             # <<<<<<<<<<<<<<
 *             process_handle,
 *             <LPVOID>base_address,
 */
    (void)(VirtualProtectEx(__pyx_v_process_handle, ((LPVOID)__pyx_v_base_address), __pyx_v_number_of_bytes, __pyx_v_old_page_protection, (&__pyx_v_old_page_protection)));

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":200
 *             &old_page_protection
 *         )
 *         return 0  # Failed to write memory             # <<<<<<<<<<<<<<
 * 
 *     # Restore the original page protection
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":185
 * 
 *     cdef SIZE_T written_bytes = 0
 *     if not WriteProcessMemory(             # <<<<<<<<<<<<<<
 *         process_handle,
 *         <LPVOID>base_address,
 */
  }

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":203
 * 
 *     # Restore the original page protection
 *     changed_page_protection = VirtualProtectEx(             # <<<<<<<<<<<<<<
 *         process_handle,
 *         <LPVOID>base_address,
 */
  __pyx_v_changed_page_protection = VirtualProtectEx(__pyx_v_process_handle, ((LPVOID)__pyx_v_base_address), __pyx_v_number_of_bytes, __pyx_v_old_page_protection, (&__pyx_v_old_page_protection));

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":211
 *     )
 * 
 *     if not changed_page_protection:             # <<<<<<<<<<<<<<
 *         return 0  # Failed to restore page protection
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_changed_page_protection != 0)) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":212
 * 
 *     if not changed_page_protection:
 *         return 0  # Failed to restore page protection             # <<<<<<<<<<<<<<
 * 
 *     return written_bytes
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":211
 *     )
 * 
 *     if not changed_page_protection:             # <<<<<<<<<<<<<<
 *         return 0  # Failed to restore page protection
 * 
 */
  }

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":214
 *         return 0  # Failed to restore page protection
 * 
 *     return written_bytes             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_written_bytes;
  goto __pyx_L0;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":157
 *     return read_bytes
 * 
 * cdef inline SIZE_T PrivilagedMemoryWrite(HANDLE process_handle, LPCVOID base_address, LPCVOID write_buffer, SIZE_T number_of_bytes) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Writes memory to a specified address in a process's virtual memory, adjusting page protection as necessary.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "virtual_memory_toolkit/windows/windows_defs.pxd":217
 * 
 * 
 * cdef inline MEMORY_BASIC_INFORMATION* GetMemoryRegionsInRange(             # <<<<<<<<<<<<<<
 *     HANDLE process,
 *     LPCVOID start_address,
 */

static CYTHON_INLINE MEMORY_BASIC_INFORMATION *__pyx_f_22virtual_memory_toolkit_7windows_12windows_defs_GetMemoryRegionsInRange(HANDLE __pyx_v_process, LPCVOID __pyx_v_start_address, LPCVOID __pyx_v_end_address, unsigned PY_LONG_LONG *__pyx_v_out_found_regions) {
  MEMORY_BASIC_INFORMATION __pyx_v_mbi;
  LPCVOID __pyx_v_current_address;
  unsigned PY_LONG_LONG __pyx_v_total_regions;
  MEMORY_BASIC_INFORMATION *__pyx_v_regions;
  MEMORY_BASIC_INFORMATION *__pyx_v_temp_regions;
  unsigned PY_LONG_LONG __pyx_v_regions_capacity;
  MEMORY_BASIC_INFORMATION *__pyx_r;
  int __pyx_t_1;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":225
 *     cdef MEMORY_BASIC_INFORMATION mbi
 *     cdef unsigned long information_buffer_size
 *     cdef LPCVOID current_address = start_address             # <<<<<<<<<<<<<<
 *     cdef unsigned long long total_regions = 0
 *     cdef MEMORY_BASIC_INFORMATION *regions = NULL
 */
  __pyx_v_current_address = __pyx_v_start_address;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":226
 *     cdef unsigned long information_buffer_size
 *     cdef LPCVOID current_address = start_address
 *     cdef unsigned long long total_regions = 0             # <<<<<<<<<<<<<<
 *     cdef MEMORY_BASIC_INFORMATION *regions = NULL
 *     cdef MEMORY_BASIC_INFORMATION *temp_regions = NULL
 */
  __pyx_v_total_regions = 0;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":227
 *     cdef LPCVOID current_address = start_address
 *     cdef unsigned long long total_regions = 0
 *     cdef MEMORY_BASIC_INFORMATION *regions = NULL             # <<<<<<<<<<<<<<
 *     cdef MEMORY_BASIC_INFORMATION *temp_regions = NULL
 *     cdef unsigned long long regions_capacity = 128  # Initial capacity for regions array
 */
  __pyx_v_regions = NULL;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":228
 *     cdef unsigned long long total_regions = 0
 *     cdef MEMORY_BASIC_INFORMATION *regions = NULL
 *     cdef MEMORY_BASIC_INFORMATION *temp_regions = NULL             # <<<<<<<<<<<<<<
 *     cdef unsigned long long regions_capacity = 128  # Initial capacity for regions array
 *     cdef unsigned long long i
 */
  __pyx_v_temp_regions = NULL;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":229
 *     cdef MEMORY_BASIC_INFORMATION *regions = NULL
 *     cdef MEMORY_BASIC_INFORMATION *temp_regions = NULL
 *     cdef unsigned long long regions_capacity = 128  # Initial capacity for regions array             # <<<<<<<<<<<<<<
 *     cdef unsigned long long i
 * 
 */
  __pyx_v_regions_capacity = 0x80;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":232
 *     cdef unsigned long long i
 * 
 *     regions = <MEMORY_BASIC_INFORMATION*>malloc(regions_capacity * sizeof(MEMORY_BASIC_INFORMATION))             # <<<<<<<<<<<<<<
 *     if regions == NULL:
 *         return NULL
 */
  __pyx_v_regions = ((MEMORY_BASIC_INFORMATION *)malloc((__pyx_v_regions_capacity * (sizeof(MEMORY_BASIC_INFORMATION)))));

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":233
 * 
 *     regions = <MEMORY_BASIC_INFORMATION*>malloc(regions_capacity * sizeof(MEMORY_BASIC_INFORMATION))
 *     if regions == NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 * 
 */
  __pyx_t_1 = ((__pyx_v_regions == NULL) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":234
 *     regions = <MEMORY_BASIC_INFORMATION*>malloc(regions_capacity * sizeof(MEMORY_BASIC_INFORMATION))
 *     if regions == NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 * 
 *     while current_address < end_address:
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":233
 * 
 *     regions = <MEMORY_BASIC_INFORMATION*>malloc(regions_capacity * sizeof(MEMORY_BASIC_INFORMATION))
 *     if regions == NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 * 
 */
  }

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":236
 *         return NULL
 * 
 *     while current_address < end_address:             # <<<<<<<<<<<<<<
 * 
 *         if VirtualQueryEx(process, current_address, &mbi, sizeof(mbi)) == 0:
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_current_address < __pyx_v_end_address) != 0);
    if (!__pyx_t_1) break;

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":238
 *     while current_address < end_address:
 * 
 *         if VirtualQueryEx(process, current_address, &mbi, sizeof(mbi)) == 0:             # <<<<<<<<<<<<<<
 *             current_address = <LPCVOID>(<unsigned long long>current_address + 10)
 *             continue
 */
    __pyx_t_1 = ((VirtualQueryEx(__pyx_v_process, __pyx_v_current_address, (&__pyx_v_mbi), (sizeof(__pyx_v_mbi))) == 0) != 0);
    if (__pyx_t_1) {

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":239
 * 
 *         if VirtualQueryEx(process, current_address, &mbi, sizeof(mbi)) == 0:
 *             current_address = <LPCVOID>(<unsigned long long>current_address + 10)             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
      __pyx_v_current_address = ((LPCVOID)(((unsigned PY_LONG_LONG)__pyx_v_current_address) + 10));

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":240
 *         if VirtualQueryEx(process, current_address, &mbi, sizeof(mbi)) == 0:
 *             current_address = <LPCVOID>(<unsigned long long>current_address + 10)
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         if total_regions >= regions_capacity:
 */
      goto __pyx_L4_continue;

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":238
 *     while current_address < end_address:
 * 
 *         if VirtualQueryEx(process, current_address, &mbi, sizeof(mbi)) == 0:             # <<<<<<<<<<<<<<
 *             current_address = <LPCVOID>(<unsigned long long>current_address + 10)
 *             continue
 */
    }

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":242
 *             continue
 * 
 *         if total_regions >= regions_capacity:             # <<<<<<<<<<<<<<
 *             regions_capacity *= 2
 *             temp_regions = <MEMORY_BASIC_INFORMATION*>realloc(
 */
    __pyx_t_1 = ((__pyx_v_total_regions >= __pyx_v_regions_capacity) != 0);
    if (__pyx_t_1) {

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":243
 * 
 *         if total_regions >= regions_capacity:
 *             regions_capacity *= 2             # <<<<<<<<<<<<<<
 *             temp_regions = <MEMORY_BASIC_INFORMATION*>realloc(
 *                 regions,
 */
      __pyx_v_regions_capacity = (__pyx_v_regions_capacity * 2);

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":244
 *         if total_regions >= regions_capacity:
 *             regions_capacity *= 2
 *             temp_regions = <MEMORY_BASIC_INFORMATION*>realloc(             # <<<<<<<<<<<<<<
 *                 regions,
 *                 regions_capacity * sizeof(MEMORY_BASIC_INFORMATION)
 */
      __pyx_v_temp_regions = ((MEMORY_BASIC_INFORMATION *)realloc(__pyx_v_regions, (__pyx_v_regions_capacity * (sizeof(MEMORY_BASIC_INFORMATION)))));

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":248
 *                 regions_capacity * sizeof(MEMORY_BASIC_INFORMATION)
 *             )
 *             if temp_regions == NULL:             # <<<<<<<<<<<<<<
 *                 free(regions)
 *                 return NULL
 */
      __pyx_t_1 = ((__pyx_v_temp_regions == NULL) != 0);
      if (__pyx_t_1) {

        /* "virtual_memory_toolkit/windows/windows_defs.pxd":249
 *             )
 *             if temp_regions == NULL:
 *                 free(regions)             # <<<<<<<<<<<<<<
 *                 return NULL
 *             regions = temp_regions
 */
        free(__pyx_v_regions);

        /* "virtual_memory_toolkit/windows/windows_defs.pxd":250
 *             if temp_regions == NULL:
 *                 free(regions)
 *                 return NULL             # <<<<<<<<<<<<<<
 *             regions = temp_regions
 * 
 */
        __pyx_r = NULL;
        goto __pyx_L0;

        /* "virtual_memory_toolkit/windows/windows_defs.pxd":248
 *                 regions_capacity * sizeof(MEMORY_BASIC_INFORMATION)
 *             )
 *             if temp_regions == NULL:             # <<<<<<<<<<<<<<
 *                 free(regions)
 *                 return NULL
 */
      }

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":251
 *                 free(regions)
 *                 return NULL
 *             regions = temp_regions             # <<<<<<<<<<<<<<
 * 
 *         regions[total_regions] = mbi
 */
      __pyx_v_regions = __pyx_v_temp_regions;

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":242
 *             continue
 * 
 *         if total_regions >= regions_capacity:             # <<<<<<<<<<<<<<
 *             regions_capacity *= 2
 *             temp_regions = <MEMORY_BASIC_INFORMATION*>realloc(
 */
    }

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":253
 *             regions = temp_regions
 * 
 *         regions[total_regions] = mbi             # <<<<<<<<<<<<<<
 *         total_regions += 1
 * 
 */
    (__pyx_v_regions[__pyx_v_total_regions]) = __pyx_v_mbi;

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":254
 * 
 *         regions[total_regions] = mbi
 *         total_regions += 1             # <<<<<<<<<<<<<<
 * 
 *         current_address = <LPCVOID>(<unsigned long long>mbi.BaseAddress + mbi.RegionSize)
 */
    __pyx_v_total_regions = (__pyx_v_total_regions + 1);

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":256
 *         total_regions += 1
 * 
 *         current_address = <LPCVOID>(<unsigned long long>mbi.BaseAddress + mbi.RegionSize)             # <<<<<<<<<<<<<<
 * 
 *     if total_regions == 0:
 */
    __pyx_v_current_address = ((LPCVOID)(((unsigned PY_LONG_LONG)__pyx_v_mbi.BaseAddress) + __pyx_v_mbi.RegionSize));
    __pyx_L4_continue:;
  }

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":258
 *         current_address = <LPCVOID>(<unsigned long long>mbi.BaseAddress + mbi.RegionSize)
 * 
 *     if total_regions == 0:             # <<<<<<<<<<<<<<
 *         free(regions)
 *         out_found_regions[0]=0
 */
  __pyx_t_1 = ((__pyx_v_total_regions == 0) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":259
 * 
 *     if total_regions == 0:
 *         free(regions)             # <<<<<<<<<<<<<<
 *         out_found_regions[0]=0
 *         return NULL
 */
    free(__pyx_v_regions);

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":260
 *     if total_regions == 0:
 *         free(regions)
 *         out_found_regions[0]=0             # <<<<<<<<<<<<<<
 *         return NULL
 * 
 */
    (__pyx_v_out_found_regions[0]) = 0;

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":261
 *         free(regions)
 *         out_found_regions[0]=0
 *         return NULL             # <<<<<<<<<<<<<<
 * 
 *     if out_found_regions != NULL:
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":258
 *         current_address = <LPCVOID>(<unsigned long long>mbi.BaseAddress + mbi.RegionSize)
 * 
 *     if total_regions == 0:             # <<<<<<<<<<<<<<
 *         free(regions)
 *         out_found_regions[0]=0
 */
  }

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":263
 *         return NULL
 * 
 *     if out_found_regions != NULL:             # <<<<<<<<<<<<<<
 *         out_found_regions[0] = total_regions
 * 
 */
  __pyx_t_1 = ((__pyx_v_out_found_regions != NULL) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":264
 * 
 *     if out_found_regions != NULL:
 *         out_found_regions[0] = total_regions             # <<<<<<<<<<<<<<
 * 
 *     return regions
 */
    (__pyx_v_out_found_regions[0]) = __pyx_v_total_regions;

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":263
 *         return NULL
 * 
 *     if out_found_regions != NULL:             # <<<<<<<<<<<<<<
 *         out_found_regions[0] = total_regions
 * 
 */
  }

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":266
 *         out_found_regions[0] = total_regions
 * 
 *     return regions             # <<<<<<<<<<<<<<
 * 
 * cdef inline BOOL PrivilagedSearchMemoryBytes(
 */
  __pyx_r = __pyx_v_regions;
  goto __pyx_L0;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":217
 * 
 * 
 * cdef inline MEMORY_BASIC_INFORMATION* GetMemoryRegionsInRange(             # <<<<<<<<<<<<<<
 *     HANDLE process,
 *     LPCVOID start_address,
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "virtual_memory_toolkit/windows/windows_defs.pxd":268
 *     return regions
 * 
 * cdef inline BOOL PrivilagedSearchMemoryBytes(             # <<<<<<<<<<<<<<
 *     HANDLE process,
 *     LPCVOID start_address,
 */

static CYTHON_INLINE BOOL __pyx_f_22virtual_memory_toolkit_7windows_12windows_defs_PrivilagedSearchMemoryBytes(HANDLE __pyx_v_process, LPCVOID __pyx_v_start_address, LPCVOID __pyx_v_end_address, CYTHON_UNUSED PBYTE __pyx_v_pattern, SIZE_T __pyx_v_pattern_size, CYTHON_UNUSED LPVOID *__pyx_v_out_found_address) {
  CYTHON_UNUSED SIZE_T __pyx_v_address;
  BYTE *__pyx_v_read_bytes_buffer;
  unsigned PY_LONG_LONG __pyx_v_found_regions;
  MEMORY_BASIC_INFORMATION *__pyx_v_memory_regions;
  MEMORY_BASIC_INFORMATION __pyx_v_memory_region;
  unsigned PY_LONG_LONG __pyx_v_iter_size;
  unsigned PY_LONG_LONG __pyx_v_start_region_address;
  CYTHON_UNUSED unsigned PY_LONG_LONG __pyx_v_end_region_address;
  unsigned PY_LONG_LONG __pyx_v_i;
  CYTHON_UNUSED unsigned PY_LONG_LONG __pyx_v_j;
  BOOL __pyx_r;
  unsigned PY_LONG_LONG __pyx_t_1;
  unsigned PY_LONG_LONG __pyx_t_2;
  unsigned PY_LONG_LONG __pyx_t_3;
  int __pyx_t_4;
  unsigned PY_LONG_LONG __pyx_t_5;
  unsigned PY_LONG_LONG __pyx_t_6;
  unsigned PY_LONG_LONG __pyx_t_7;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":291
 *     """
 * 
 *     cdef SIZE_T address = <SIZE_T>start_address             # <<<<<<<<<<<<<<
 *     cdef SIZE_T region_end
 *     cdef SIZE_T search_end
 */
  __pyx_v_address = ((SIZE_T)__pyx_v_start_address);

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":300
 *     cdef MEMORY_BASIC_INFORMATION* memory_regions
 *     cdef MEMORY_BASIC_INFORMATION memory_region
 *     memory_regions = GetMemoryRegionsInRange(             # <<<<<<<<<<<<<<
 *         process,
 *         start_address,
 */
  __pyx_v_memory_regions = __pyx_f_22virtual_memory_toolkit_7windows_12windows_defs_GetMemoryRegionsInRange(__pyx_v_process, __pyx_v_start_address, __pyx_v_end_address, (&__pyx_v_found_regions));

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":311
 *     cdef unsigned long long start_region_address
 *     cdef unsigned long long end_region_address
 *     for i in range(found_regions):             # <<<<<<<<<<<<<<
 *         memory_region = memory_regions[i]
 * 
 */
  __pyx_t_1 = __pyx_v_found_regions;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":312
 *     cdef unsigned long long end_region_address
 *     for i in range(found_regions):
 *         memory_region = memory_regions[i]             # <<<<<<<<<<<<<<
 * 
 *         if memory_region.State != MEM_COMMIT:
 */
    __pyx_v_memory_region = (__pyx_v_memory_regions[__pyx_v_i]);

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":314
 *         memory_region = memory_regions[i]
 * 
 *         if memory_region.State != MEM_COMMIT:             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
    __pyx_t_4 = ((__pyx_v_memory_region.State != MEM_COMMIT) != 0);
    if (__pyx_t_4) {

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":315
 * 
 *         if memory_region.State != MEM_COMMIT:
 *             continue             # <<<<<<<<<<<<<<
 * 
 *         start_region_address = <unsigned long long>memory_region.BaseAddress
 */
      goto __pyx_L3_continue;

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":314
 *         memory_region = memory_regions[i]
 * 
 *         if memory_region.State != MEM_COMMIT:             # <<<<<<<<<<<<<<
 *             continue
 * 
 */
    }

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":317
 *             continue
 * 
 *         start_region_address = <unsigned long long>memory_region.BaseAddress             # <<<<<<<<<<<<<<
 *         end_region_address = <unsigned long long>memory_region.BaseAddress + memory_region.RegionSize
 * 
 */
    __pyx_v_start_region_address = ((unsigned PY_LONG_LONG)__pyx_v_memory_region.BaseAddress);

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":318
 * 
 *         start_region_address = <unsigned long long>memory_region.BaseAddress
 *         end_region_address = <unsigned long long>memory_region.BaseAddress + memory_region.RegionSize             # <<<<<<<<<<<<<<
 * 
 *         read_bytes_buffer = <BYTE*>malloc(
 */
    __pyx_v_end_region_address = (((unsigned PY_LONG_LONG)__pyx_v_memory_region.BaseAddress) + __pyx_v_memory_region.RegionSize);

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":320
 *         end_region_address = <unsigned long long>memory_region.BaseAddress + memory_region.RegionSize
 * 
 *         read_bytes_buffer = <BYTE*>malloc(             # <<<<<<<<<<<<<<
 *             memory_region.RegionSize * sizeof(BYTE)
 *         )
 */
    __pyx_v_read_bytes_buffer = ((BYTE *)malloc((__pyx_v_memory_region.RegionSize * (sizeof(BYTE)))));

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":324
 *         )
 * 
 *         if not read_bytes_buffer:             # <<<<<<<<<<<<<<
 *             return 1
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_read_bytes_buffer != 0)) != 0);
    if (__pyx_t_4) {

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":325
 * 
 *         if not read_bytes_buffer:
 *             return 1             # <<<<<<<<<<<<<<
 * 
 *         if PrivilagedMemoryRead(
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":324
 *         )
 * 
 *         if not read_bytes_buffer:             # <<<<<<<<<<<<<<
 *             return 1
 * 
 */
    }

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":332
 *             <LPVOID>read_bytes_buffer,
 *             memory_region.RegionSize
 *         ) != memory_region.RegionSize:             # <<<<<<<<<<<<<<
 *             free(read_bytes_buffer)
 *             return 1
 */
    __pyx_t_4 = ((__pyx_f_22virtual_memory_toolkit_7windows_12windows_defs_PrivilagedMemoryRead(__pyx_v_process, ((LPCVOID)__pyx_v_start_region_address), ((LPVOID)__pyx_v_read_bytes_buffer), __pyx_v_memory_region.RegionSize) != __pyx_v_memory_region.RegionSize) != 0);

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":327
 *             return 1
 * 
 *         if PrivilagedMemoryRead(             # <<<<<<<<<<<<<<
 *             process,
 *             <LPCVOID>start_region_address,
 */
    if (__pyx_t_4) {

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":333
 *             memory_region.RegionSize
 *         ) != memory_region.RegionSize:
 *             free(read_bytes_buffer)             # <<<<<<<<<<<<<<
 *             return 1
 * 
 */
      free(__pyx_v_read_bytes_buffer);

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":334
 *         ) != memory_region.RegionSize:
 *             free(read_bytes_buffer)
 *             return 1             # <<<<<<<<<<<<<<
 * 
 *         iter_size = memory_region.RegionSize-pattern_size
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":327
 *             return 1
 * 
 *         if PrivilagedMemoryRead(             # <<<<<<<<<<<<<<
 *             process,
 *             <LPCVOID>start_region_address,
 */
    }

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":336
 *             return 1
 * 
 *         iter_size = memory_region.RegionSize-pattern_size             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_iter_size = (__pyx_v_memory_region.RegionSize - __pyx_v_pattern_size);

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":339
 * 
 * 
 *         for j in range(iter_size):             # <<<<<<<<<<<<<<
 *             pass
 *             #sub_region = read_bytes_buffer + j
 */
    __pyx_t_5 = __pyx_v_iter_size;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_j = __pyx_t_7;
    }

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":352
 *             #    return 0  # Pattern found
 * 
 *         free(read_bytes_buffer)             # <<<<<<<<<<<<<<
 * 
 *     return 1  # Pattern not found or error occurred
 */
    free(__pyx_v_read_bytes_buffer);
    __pyx_L3_continue:;
  }

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":354
 *         free(read_bytes_buffer)
 * 
 *     return 1  # Pattern not found or error occurred             # <<<<<<<<<<<<<<
 * 
 * cdef inline BOOL _FindProcessFromWindowTitleSubstringCallback(HWND hWnd, LPARAM lparam) noexcept nogil:
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":268
 *     return regions
 * 
 * cdef inline BOOL PrivilagedSearchMemoryBytes(             # <<<<<<<<<<<<<<
 *     HANDLE process,
 *     LPCVOID start_address,
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "virtual_memory_toolkit/windows/windows_defs.pxd":356
 *     return 1  # Pattern not found or error occurred
 * 
 * cdef inline BOOL _FindProcessFromWindowTitleSubstringCallback(HWND hWnd, LPARAM lparam) noexcept nogil:             # <<<<<<<<<<<<<<
 *     cdef FIND_PROCESS_LPARAM* data = <FIND_PROCESS_LPARAM*>lparam
 *     cdef int length = GetWindowTextLengthA(hWnd)
 */

static CYTHON_INLINE BOOL __pyx_f_22virtual_memory_toolkit_7windows_12windows_defs__FindProcessFromWindowTitleSubstringCallback(HWND __pyx_v_hWnd, LPARAM __pyx_v_lparam) {
  FIND_PROCESS_LPARAM *__pyx_v_data;
  int __pyx_v_length;
  char *__pyx_v_current_window_title;
  DWORD __pyx_v_target_pid;
  int __pyx_v_found_substring;
  BOOL __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":357
 * 
 * cdef inline BOOL _FindProcessFromWindowTitleSubstringCallback(HWND hWnd, LPARAM lparam) noexcept nogil:
 *     cdef FIND_PROCESS_LPARAM* data = <FIND_PROCESS_LPARAM*>lparam             # <<<<<<<<<<<<<<
 *     cdef int length = GetWindowTextLengthA(hWnd)
 *     cdef char* current_window_title = <char*>malloc(sizeof(char) * (length + 1))
 */
  __pyx_v_data = ((FIND_PROCESS_LPARAM *)__pyx_v_lparam);

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":358
 * cdef inline BOOL _FindProcessFromWindowTitleSubstringCallback(HWND hWnd, LPARAM lparam) noexcept nogil:
 *     cdef FIND_PROCESS_LPARAM* data = <FIND_PROCESS_LPARAM*>lparam
 *     cdef int length = GetWindowTextLengthA(hWnd)             # <<<<<<<<<<<<<<
 *     cdef char* current_window_title = <char*>malloc(sizeof(char) * (length + 1))
 *     cdef DWORD target_pid = 0
 */
  __pyx_v_length = GetWindowTextLengthA(__pyx_v_hWnd);

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":359
 *     cdef FIND_PROCESS_LPARAM* data = <FIND_PROCESS_LPARAM*>lparam
 *     cdef int length = GetWindowTextLengthA(hWnd)
 *     cdef char* current_window_title = <char*>malloc(sizeof(char) * (length + 1))             # <<<<<<<<<<<<<<
 *     cdef DWORD target_pid = 0
 *     cdef bint found_substring = 0
 */
  __pyx_v_current_window_title = ((char *)malloc(((sizeof(char)) * (__pyx_v_length + 1))));

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":360
 *     cdef int length = GetWindowTextLengthA(hWnd)
 *     cdef char* current_window_title = <char*>malloc(sizeof(char) * (length + 1))
 *     cdef DWORD target_pid = 0             # <<<<<<<<<<<<<<
 *     cdef bint found_substring = 0
 * 
 */
  __pyx_v_target_pid = 0;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":361
 *     cdef char* current_window_title = <char*>malloc(sizeof(char) * (length + 1))
 *     cdef DWORD target_pid = 0
 *     cdef bint found_substring = 0             # <<<<<<<<<<<<<<
 * 
 *     GetWindowTextA(hWnd, current_window_title, length + 1)
 */
  __pyx_v_found_substring = 0;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":363
 *     cdef bint found_substring = 0
 * 
 *     GetWindowTextA(hWnd, current_window_title, length + 1)             # <<<<<<<<<<<<<<
 * 
 *     if (length != 0 and IsWindowVisible(hWnd)):
 */
  (void)(GetWindowTextA(__pyx_v_hWnd, __pyx_v_current_window_title, (__pyx_v_length + 1)));

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":365
 *     GetWindowTextA(hWnd, current_window_title, length + 1)
 * 
 *     if (length != 0 and IsWindowVisible(hWnd)):             # <<<<<<<<<<<<<<
 * 
 *         found_substring = strstr(
 */
  __pyx_t_2 = ((__pyx_v_length != 0) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (IsWindowVisible(__pyx_v_hWnd) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":370
 *             current_window_title,
 *             data.in_window_name_substring
 *         ) != NULL             # <<<<<<<<<<<<<<
 * 
 *         if found_substring:
 */
    __pyx_v_found_substring = (strstr(__pyx_v_current_window_title, __pyx_v_data->in_window_name_substring) != NULL);

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":372
 *         ) != NULL
 * 
 *         if found_substring:             # <<<<<<<<<<<<<<
 *             GetWindowThreadProcessId(hWnd, &target_pid)
 *             data.out_pid = target_pid
 */
    __pyx_t_1 = (__pyx_v_found_substring != 0);
    if (__pyx_t_1) {

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":373
 * 
 *         if found_substring:
 *             GetWindowThreadProcessId(hWnd, &target_pid)             # <<<<<<<<<<<<<<
 *             data.out_pid = target_pid
 *             data.out_window_handle = hWnd
 */
      (void)(GetWindowThreadProcessId(__pyx_v_hWnd, (&__pyx_v_target_pid)));

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":374
 *         if found_substring:
 *             GetWindowThreadProcessId(hWnd, &target_pid)
 *             data.out_pid = target_pid             # <<<<<<<<<<<<<<
 *             data.out_window_handle = hWnd
 *             data.out_all_access_process_handle = OpenProcess(
 */
      __pyx_v_data->out_pid = __pyx_v_target_pid;

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":375
 *             GetWindowThreadProcessId(hWnd, &target_pid)
 *             data.out_pid = target_pid
 *             data.out_window_handle = hWnd             # <<<<<<<<<<<<<<
 *             data.out_all_access_process_handle = OpenProcess(
 *                 PROCESS_ALL_ACCESS,
 */
      __pyx_v_data->out_window_handle = __pyx_v_hWnd;

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":376
 *             data.out_pid = target_pid
 *             data.out_window_handle = hWnd
 *             data.out_all_access_process_handle = OpenProcess(             # <<<<<<<<<<<<<<
 *                 PROCESS_ALL_ACCESS,
 *                 False,
 */
      __pyx_v_data->out_all_access_process_handle = OpenProcess(PROCESS_ALL_ACCESS, 0, __pyx_v_target_pid);

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":381
 *                 target_pid
 *             )
 *             data.out_full_window_name = current_window_title             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
      __pyx_v_data->out_full_window_name = __pyx_v_current_window_title;

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":382
 *             )
 *             data.out_full_window_name = current_window_title
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     free(current_window_title)
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "virtual_memory_toolkit/windows/windows_defs.pxd":372
 *         ) != NULL
 * 
 *         if found_substring:             # <<<<<<<<<<<<<<
 *             GetWindowThreadProcessId(hWnd, &target_pid)
 *             data.out_pid = target_pid
 */
    }

    /* "virtual_memory_toolkit/windows/windows_defs.pxd":365
 *     GetWindowTextA(hWnd, current_window_title, length + 1)
 * 
 *     if (length != 0 and IsWindowVisible(hWnd)):             # <<<<<<<<<<<<<<
 * 
 *         found_substring = strstr(
 */
  }

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":384
 *             return False
 * 
 *     free(current_window_title)             # <<<<<<<<<<<<<<
 *     return True
 * 
 */
  free(__pyx_v_current_window_title);

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":385
 * 
 *     free(current_window_title)
 *     return True             # <<<<<<<<<<<<<<
 * 
 * cdef inline FIND_PROCESS_LPARAM FindProcessFromWindowTitleSubstring(const char* window_name_sub_string) nogil:
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":356
 *     return 1  # Pattern not found or error occurred
 * 
 * cdef inline BOOL _FindProcessFromWindowTitleSubstringCallback(HWND hWnd, LPARAM lparam) noexcept nogil:             # <<<<<<<<<<<<<<
 *     cdef FIND_PROCESS_LPARAM* data = <FIND_PROCESS_LPARAM*>lparam
 *     cdef int length = GetWindowTextLengthA(hWnd)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "virtual_memory_toolkit/windows/windows_defs.pxd":387
 *     return True
 * 
 * cdef inline FIND_PROCESS_LPARAM FindProcessFromWindowTitleSubstring(const char* window_name_sub_string) nogil:             # <<<<<<<<<<<<<<
 *     cdef FIND_PROCESS_LPARAM data
 * 
 */

static CYTHON_INLINE FIND_PROCESS_LPARAM __pyx_f_22virtual_memory_toolkit_7windows_12windows_defs_FindProcessFromWindowTitleSubstring(char const *__pyx_v_window_name_sub_string) {
  FIND_PROCESS_LPARAM __pyx_v_data;
  FIND_PROCESS_LPARAM __pyx_r;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":390
 *     cdef FIND_PROCESS_LPARAM data
 * 
 *     data.in_window_name_substring = window_name_sub_string             # <<<<<<<<<<<<<<
 *     data.out_all_access_process_handle = <HANDLE>0
 *     data.out_pid = 0
 */
  __pyx_v_data.in_window_name_substring = __pyx_v_window_name_sub_string;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":391
 * 
 *     data.in_window_name_substring = window_name_sub_string
 *     data.out_all_access_process_handle = <HANDLE>0             # <<<<<<<<<<<<<<
 *     data.out_pid = 0
 *     data.out_window_handle = <HWND>0
 */
  __pyx_v_data.out_all_access_process_handle = ((HANDLE)0);

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":392
 *     data.in_window_name_substring = window_name_sub_string
 *     data.out_all_access_process_handle = <HANDLE>0
 *     data.out_pid = 0             # <<<<<<<<<<<<<<
 *     data.out_window_handle = <HWND>0
 *     EnumWindows(_FindProcessFromWindowTitleSubstringCallback, <LPARAM>&data)
 */
  __pyx_v_data.out_pid = 0;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":393
 *     data.out_all_access_process_handle = <HANDLE>0
 *     data.out_pid = 0
 *     data.out_window_handle = <HWND>0             # <<<<<<<<<<<<<<
 *     EnumWindows(_FindProcessFromWindowTitleSubstringCallback, <LPARAM>&data)
 * 
 */
  __pyx_v_data.out_window_handle = ((HWND)0);

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":394
 *     data.out_pid = 0
 *     data.out_window_handle = <HWND>0
 *     EnumWindows(_FindProcessFromWindowTitleSubstringCallback, <LPARAM>&data)             # <<<<<<<<<<<<<<
 * 
 *     return data
 */
  (void)(EnumWindows(__pyx_f_22virtual_memory_toolkit_7windows_12windows_defs__FindProcessFromWindowTitleSubstringCallback, ((LPARAM)(&__pyx_v_data))));

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":396
 *     EnumWindows(_FindProcessFromWindowTitleSubstringCallback, <LPARAM>&data)
 * 
 *     return data             # <<<<<<<<<<<<<<
 */
  __pyx_r = __pyx_v_data;
  goto __pyx_L0;

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":387
 *     return True
 * 
 * cdef inline FIND_PROCESS_LPARAM FindProcessFromWindowTitleSubstring(const char* window_name_sub_string) nogil:             # <<<<<<<<<<<<<<
 *     cdef FIND_PROCESS_LPARAM data
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "virtual_memory_toolkit/handles/handle.pxd":23
 *         char* window_title
 * 
 * cdef inline CAppHandle* CAppHandle_init(void* process_handle, void* window_handle, unsigned int pid, char* window_title) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Creates a new CAppHandle instance with NULL fields.
 */

static CYTHON_INLINE CAppHandle *__pyx_f_22virtual_memory_toolkit_7handles_6handle_CAppHandle_init(void *__pyx_v_process_handle, void *__pyx_v_window_handle, unsigned int __pyx_v_pid, char *__pyx_v_window_title) {
  CAppHandle *__pyx_v_app_handle;
  CAppHandle *__pyx_r;
  int __pyx_t_1;

  /* "virtual_memory_toolkit/handles/handle.pxd":36
 *         Returns NULL if memory allocation fails.
 *     """
 *     cdef CAppHandle* app_handle = <CAppHandle*>malloc(sizeof(CAppHandle))             # <<<<<<<<<<<<<<
 *     if not app_handle:
 *         return NULL  # Memory allocation failed
 */
  __pyx_v_app_handle = ((CAppHandle *)malloc((sizeof(CAppHandle))));

  /* "virtual_memory_toolkit/handles/handle.pxd":37
 *     """
 *     cdef CAppHandle* app_handle = <CAppHandle*>malloc(sizeof(CAppHandle))
 *     if not app_handle:             # <<<<<<<<<<<<<<
 *         return NULL  # Memory allocation failed
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_app_handle != 0)) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/handles/handle.pxd":38
 *     cdef CAppHandle* app_handle = <CAppHandle*>malloc(sizeof(CAppHandle))
 *     if not app_handle:
 *         return NULL  # Memory allocation failed             # <<<<<<<<<<<<<<
 * 
 *     app_handle[0].process_handle = <HANDLE>process_handle
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/handles/handle.pxd":37
 *     """
 *     cdef CAppHandle* app_handle = <CAppHandle*>malloc(sizeof(CAppHandle))
 *     if not app_handle:             # <<<<<<<<<<<<<<
 *         return NULL  # Memory allocation failed
 * 
 */
  }

  /* "virtual_memory_toolkit/handles/handle.pxd":40
 *         return NULL  # Memory allocation failed
 * 
 *     app_handle[0].process_handle = <HANDLE>process_handle             # <<<<<<<<<<<<<<
 *     app_handle[0].window_handle = <HWND>window_handle
 *     app_handle[0].pid = <DWORD>pid
 */
  (__pyx_v_app_handle[0]).process_handle = ((HANDLE)__pyx_v_process_handle);

  /* "virtual_memory_toolkit/handles/handle.pxd":41
 * 
 *     app_handle[0].process_handle = <HANDLE>process_handle
 *     app_handle[0].window_handle = <HWND>window_handle             # <<<<<<<<<<<<<<
 *     app_handle[0].pid = <DWORD>pid
 *     app_handle[0].window_title = window_title
 */
  (__pyx_v_app_handle[0]).window_handle = ((HWND)__pyx_v_window_handle);

  /* "virtual_memory_toolkit/handles/handle.pxd":42
 *     app_handle[0].process_handle = <HANDLE>process_handle
 *     app_handle[0].window_handle = <HWND>window_handle
 *     app_handle[0].pid = <DWORD>pid             # <<<<<<<<<<<<<<
 *     app_handle[0].window_title = window_title
 * 
 */
  (__pyx_v_app_handle[0]).pid = ((DWORD)__pyx_v_pid);

  /* "virtual_memory_toolkit/handles/handle.pxd":43
 *     app_handle[0].window_handle = <HWND>window_handle
 *     app_handle[0].pid = <DWORD>pid
 *     app_handle[0].window_title = window_title             # <<<<<<<<<<<<<<
 * 
 *     return app_handle
 */
  (__pyx_v_app_handle[0]).window_title = __pyx_v_window_title;

  /* "virtual_memory_toolkit/handles/handle.pxd":45
 *     app_handle[0].window_title = window_title
 * 
 *     return app_handle             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_app_handle;
  goto __pyx_L0;

  /* "virtual_memory_toolkit/handles/handle.pxd":23
 *         char* window_title
 * 
 * cdef inline CAppHandle* CAppHandle_init(void* process_handle, void* window_handle, unsigned int pid, char* window_title) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Creates a new CAppHandle instance with NULL fields.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "virtual_memory_toolkit/handles/handle.pxd":49
 * 
 * 
 * cdef inline CAppHandle* CAppHandle_from_title_substring(const char* title_sub_string) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Creates a new CAppHandle instance and populates its fields from a window title substring.
 */

static CYTHON_INLINE CAppHandle *__pyx_f_22virtual_memory_toolkit_7handles_6handle_CAppHandle_from_title_substring(char const *__pyx_v_title_sub_string) {
  CAppHandle *__pyx_v_app_handle;
  FIND_PROCESS_LPARAM __pyx_v_window_data;
  CAppHandle *__pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  HWND __pyx_t_3;
  HANDLE __pyx_t_4;
  DWORD __pyx_t_5;

  /* "virtual_memory_toolkit/handles/handle.pxd":60
 *         Returns NULL if any operation fails.
 *     """
 *     cdef CAppHandle* app_handle = <CAppHandle*>malloc(sizeof(CAppHandle))             # <<<<<<<<<<<<<<
 *     if not app_handle:
 *         return NULL  # Memory allocation failed
 */
  __pyx_v_app_handle = ((CAppHandle *)malloc((sizeof(CAppHandle))));

  /* "virtual_memory_toolkit/handles/handle.pxd":61
 *     """
 *     cdef CAppHandle* app_handle = <CAppHandle*>malloc(sizeof(CAppHandle))
 *     if not app_handle:             # <<<<<<<<<<<<<<
 *         return NULL  # Memory allocation failed
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_app_handle != 0)) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/handles/handle.pxd":62
 *     cdef CAppHandle* app_handle = <CAppHandle*>malloc(sizeof(CAppHandle))
 *     if not app_handle:
 *         return NULL  # Memory allocation failed             # <<<<<<<<<<<<<<
 * 
 *     cdef FIND_PROCESS_LPARAM window_data = FindProcessFromWindowTitleSubstring(title_sub_string)
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/handles/handle.pxd":61
 *     """
 *     cdef CAppHandle* app_handle = <CAppHandle*>malloc(sizeof(CAppHandle))
 *     if not app_handle:             # <<<<<<<<<<<<<<
 *         return NULL  # Memory allocation failed
 * 
 */
  }

  /* "virtual_memory_toolkit/handles/handle.pxd":64
 *         return NULL  # Memory allocation failed
 * 
 *     cdef FIND_PROCESS_LPARAM window_data = FindProcessFromWindowTitleSubstring(title_sub_string)             # <<<<<<<<<<<<<<
 *     if not window_data.out_window_handle or not window_data.out_all_access_process_handle:
 *         free(app_handle)
 */
  __pyx_v_window_data = __pyx_f_22virtual_memory_toolkit_7windows_12windows_defs_FindProcessFromWindowTitleSubstring(__pyx_v_title_sub_string);

  /* "virtual_memory_toolkit/handles/handle.pxd":65
 * 
 *     cdef FIND_PROCESS_LPARAM window_data = FindProcessFromWindowTitleSubstring(title_sub_string)
 *     if not window_data.out_window_handle or not window_data.out_all_access_process_handle:             # <<<<<<<<<<<<<<
 *         free(app_handle)
 *         return NULL  # Failed to find process from window title substring
 */
  __pyx_t_2 = ((!(__pyx_v_window_data.out_window_handle != 0)) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_window_data.out_all_access_process_handle != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/handles/handle.pxd":66
 *     cdef FIND_PROCESS_LPARAM window_data = FindProcessFromWindowTitleSubstring(title_sub_string)
 *     if not window_data.out_window_handle or not window_data.out_all_access_process_handle:
 *         free(app_handle)             # <<<<<<<<<<<<<<
 *         return NULL  # Failed to find process from window title substring
 * 
 */
    free(__pyx_v_app_handle);

    /* "virtual_memory_toolkit/handles/handle.pxd":67
 *     if not window_data.out_window_handle or not window_data.out_all_access_process_handle:
 *         free(app_handle)
 *         return NULL  # Failed to find process from window title substring             # <<<<<<<<<<<<<<
 * 
 *     app_handle[0].window_handle = window_data.out_window_handle
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/handles/handle.pxd":65
 * 
 *     cdef FIND_PROCESS_LPARAM window_data = FindProcessFromWindowTitleSubstring(title_sub_string)
 *     if not window_data.out_window_handle or not window_data.out_all_access_process_handle:             # <<<<<<<<<<<<<<
 *         free(app_handle)
 *         return NULL  # Failed to find process from window title substring
 */
  }

  /* "virtual_memory_toolkit/handles/handle.pxd":69
 *         return NULL  # Failed to find process from window title substring
 * 
 *     app_handle[0].window_handle = window_data.out_window_handle             # <<<<<<<<<<<<<<
 *     app_handle[0].process_handle = window_data.out_all_access_process_handle
 *     app_handle[0].pid = window_data.out_pid
 */
  __pyx_t_3 = __pyx_v_window_data.out_window_handle;
  (__pyx_v_app_handle[0]).window_handle = __pyx_t_3;

  /* "virtual_memory_toolkit/handles/handle.pxd":70
 * 
 *     app_handle[0].window_handle = window_data.out_window_handle
 *     app_handle[0].process_handle = window_data.out_all_access_process_handle             # <<<<<<<<<<<<<<
 *     app_handle[0].pid = window_data.out_pid
 * 
 */
  __pyx_t_4 = __pyx_v_window_data.out_all_access_process_handle;
  (__pyx_v_app_handle[0]).process_handle = __pyx_t_4;

  /* "virtual_memory_toolkit/handles/handle.pxd":71
 *     app_handle[0].window_handle = window_data.out_window_handle
 *     app_handle[0].process_handle = window_data.out_all_access_process_handle
 *     app_handle[0].pid = window_data.out_pid             # <<<<<<<<<<<<<<
 * 
 *     app_handle[0].window_title = <char*>malloc((strlen(window_data.out_full_window_name) + 1) * sizeof(char))
 */
  __pyx_t_5 = __pyx_v_window_data.out_pid;
  (__pyx_v_app_handle[0]).pid = __pyx_t_5;

  /* "virtual_memory_toolkit/handles/handle.pxd":73
 *     app_handle[0].pid = window_data.out_pid
 * 
 *     app_handle[0].window_title = <char*>malloc((strlen(window_data.out_full_window_name) + 1) * sizeof(char))             # <<<<<<<<<<<<<<
 *     if not app_handle[0].window_title:
 *         free(app_handle)
 */
  (__pyx_v_app_handle[0]).window_title = ((char *)malloc(((strlen(__pyx_v_window_data.out_full_window_name) + 1) * (sizeof(char)))));

  /* "virtual_memory_toolkit/handles/handle.pxd":74
 * 
 *     app_handle[0].window_title = <char*>malloc((strlen(window_data.out_full_window_name) + 1) * sizeof(char))
 *     if not app_handle[0].window_title:             # <<<<<<<<<<<<<<
 *         free(app_handle)
 *         return NULL  # Memory allocation failed
 */
  __pyx_t_1 = ((!((__pyx_v_app_handle[0]).window_title != 0)) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/handles/handle.pxd":75
 *     app_handle[0].window_title = <char*>malloc((strlen(window_data.out_full_window_name) + 1) * sizeof(char))
 *     if not app_handle[0].window_title:
 *         free(app_handle)             # <<<<<<<<<<<<<<
 *         return NULL  # Memory allocation failed
 * 
 */
    free(__pyx_v_app_handle);

    /* "virtual_memory_toolkit/handles/handle.pxd":76
 *     if not app_handle[0].window_title:
 *         free(app_handle)
 *         return NULL  # Memory allocation failed             # <<<<<<<<<<<<<<
 * 
 *     strcpy(app_handle[0].window_title, window_data.out_full_window_name)
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/handles/handle.pxd":74
 * 
 *     app_handle[0].window_title = <char*>malloc((strlen(window_data.out_full_window_name) + 1) * sizeof(char))
 *     if not app_handle[0].window_title:             # <<<<<<<<<<<<<<
 *         free(app_handle)
 *         return NULL  # Memory allocation failed
 */
  }

  /* "virtual_memory_toolkit/handles/handle.pxd":78
 *         return NULL  # Memory allocation failed
 * 
 *     strcpy(app_handle[0].window_title, window_data.out_full_window_name)             # <<<<<<<<<<<<<<
 * 
 *     return app_handle
 */
  (void)(strcpy((__pyx_v_app_handle[0]).window_title, __pyx_v_window_data.out_full_window_name));

  /* "virtual_memory_toolkit/handles/handle.pxd":80
 *     strcpy(app_handle[0].window_title, window_data.out_full_window_name)
 * 
 *     return app_handle             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_app_handle;
  goto __pyx_L0;

  /* "virtual_memory_toolkit/handles/handle.pxd":49
 * 
 * 
 * cdef inline CAppHandle* CAppHandle_from_title_substring(const char* title_sub_string) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Creates a new CAppHandle instance and populates its fields from a window title substring.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "virtual_memory_toolkit/handles/handle.pxd":84
 * 
 * 
 * cdef inline void CAppHandle_free(CAppHandle* app_handle) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Frees the memory allocated for a CAppHandle instance.
 */

static CYTHON_INLINE void __pyx_f_22virtual_memory_toolkit_7handles_6handle_CAppHandle_free(CAppHandle *__pyx_v_app_handle) {
  int __pyx_t_1;

  /* "virtual_memory_toolkit/handles/handle.pxd":91
 *         app_handle (CAppHandle*): The CAppHandle instance to be freed.
 *     """
 *     if not app_handle:             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_app_handle != 0)) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/handles/handle.pxd":92
 *     """
 *     if not app_handle:
 *         return             # <<<<<<<<<<<<<<
 * 
 *     if app_handle[0].window_handle:
 */
    goto __pyx_L0;

    /* "virtual_memory_toolkit/handles/handle.pxd":91
 *         app_handle (CAppHandle*): The CAppHandle instance to be freed.
 *     """
 *     if not app_handle:             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  }

  /* "virtual_memory_toolkit/handles/handle.pxd":94
 *         return
 * 
 *     if app_handle[0].window_handle:             # <<<<<<<<<<<<<<
 *         CloseHandle(app_handle[0].window_handle)
 * 
 */
  __pyx_t_1 = ((__pyx_v_app_handle[0]).window_handle != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/handles/handle.pxd":95
 * 
 *     if app_handle[0].window_handle:
 *         CloseHandle(app_handle[0].window_handle)             # <<<<<<<<<<<<<<
 * 
 *     if app_handle[0].process_handle:
 */
    (void)(CloseHandle((__pyx_v_app_handle[0]).window_handle));

    /* "virtual_memory_toolkit/handles/handle.pxd":94
 *         return
 * 
 *     if app_handle[0].window_handle:             # <<<<<<<<<<<<<<
 *         CloseHandle(app_handle[0].window_handle)
 * 
 */
  }

  /* "virtual_memory_toolkit/handles/handle.pxd":97
 *         CloseHandle(app_handle[0].window_handle)
 * 
 *     if app_handle[0].process_handle:             # <<<<<<<<<<<<<<
 *         CloseHandle(app_handle[0].process_handle)
 * 
 */
  __pyx_t_1 = ((__pyx_v_app_handle[0]).process_handle != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/handles/handle.pxd":98
 * 
 *     if app_handle[0].process_handle:
 *         CloseHandle(app_handle[0].process_handle)             # <<<<<<<<<<<<<<
 * 
 *     if app_handle[0].window_title:
 */
    (void)(CloseHandle((__pyx_v_app_handle[0]).process_handle));

    /* "virtual_memory_toolkit/handles/handle.pxd":97
 *         CloseHandle(app_handle[0].window_handle)
 * 
 *     if app_handle[0].process_handle:             # <<<<<<<<<<<<<<
 *         CloseHandle(app_handle[0].process_handle)
 * 
 */
  }

  /* "virtual_memory_toolkit/handles/handle.pxd":100
 *         CloseHandle(app_handle[0].process_handle)
 * 
 *     if app_handle[0].window_title:             # <<<<<<<<<<<<<<
 *         free(app_handle[0].window_title)
 *     free(app_handle)
 */
  __pyx_t_1 = ((__pyx_v_app_handle[0]).window_title != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/handles/handle.pxd":101
 * 
 *     if app_handle[0].window_title:
 *         free(app_handle[0].window_title)             # <<<<<<<<<<<<<<
 *     free(app_handle)
 */
    free((__pyx_v_app_handle[0]).window_title);

    /* "virtual_memory_toolkit/handles/handle.pxd":100
 *         CloseHandle(app_handle[0].process_handle)
 * 
 *     if app_handle[0].window_title:             # <<<<<<<<<<<<<<
 *         free(app_handle[0].window_title)
 *     free(app_handle)
 */
  }

  /* "virtual_memory_toolkit/handles/handle.pxd":102
 *     if app_handle[0].window_title:
 *         free(app_handle[0].window_title)
 *     free(app_handle)             # <<<<<<<<<<<<<<
 */
  free(__pyx_v_app_handle);

  /* "virtual_memory_toolkit/handles/handle.pxd":84
 * 
 * 
 * cdef inline void CAppHandle_free(CAppHandle* app_handle) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Frees the memory allocated for a CAppHandle instance.
 */

  /* function exit code */
  __pyx_L0:;
}

/* "virtual_memory_toolkit/process/process.pxd":23
 * 
 * 
 * cdef inline CProcess* CProcess_init(CAppHandle* app_handle) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Creates a new CProcess instance and populates its fields.
 */

static CYTHON_INLINE CProcess *__pyx_f_22virtual_memory_toolkit_7process_7process_CProcess_init(CAppHandle *__pyx_v_app_handle) {
  CProcess *__pyx_v_process;
  HANDLE __pyx_v_snapshot32;
  CProcess *__pyx_r;
  int __pyx_t_1;

  /* "virtual_memory_toolkit/process/process.pxd":34
 *         Returns NULL if memory allocation or other operations fail.
 *     """
 *     cdef CProcess* process = <CProcess*>malloc(sizeof(CProcess))             # <<<<<<<<<<<<<<
 *     if not process:
 *         return NULL  # Memory allocation failed
 */
  __pyx_v_process = ((CProcess *)malloc((sizeof(CProcess))));

  /* "virtual_memory_toolkit/process/process.pxd":35
 *     """
 *     cdef CProcess* process = <CProcess*>malloc(sizeof(CProcess))
 *     if not process:             # <<<<<<<<<<<<<<
 *         return NULL  # Memory allocation failed
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_process != 0)) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/process/process.pxd":36
 *     cdef CProcess* process = <CProcess*>malloc(sizeof(CProcess))
 *     if not process:
 *         return NULL  # Memory allocation failed             # <<<<<<<<<<<<<<
 * 
 *     cdef HANDLE snapshot32 = CreateToolhelp32Snapshot(
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/process/process.pxd":35
 *     """
 *     cdef CProcess* process = <CProcess*>malloc(sizeof(CProcess))
 *     if not process:             # <<<<<<<<<<<<<<
 *         return NULL  # Memory allocation failed
 * 
 */
  }

  /* "virtual_memory_toolkit/process/process.pxd":38
 *         return NULL  # Memory allocation failed
 * 
 *     cdef HANDLE snapshot32 = CreateToolhelp32Snapshot(             # <<<<<<<<<<<<<<
 *         TH32CS_SNAPMODULE32 | TH32CS_SNAPMODULE,
 *         app_handle[0].pid
 */
  __pyx_v_snapshot32 = CreateToolhelp32Snapshot((TH32CS_SNAPMODULE32 | TH32CS_SNAPMODULE), (__pyx_v_app_handle[0]).pid);

  /* "virtual_memory_toolkit/process/process.pxd":43
 *     )
 * 
 *     if snapshot32 == INVALID_HANDLE_VALUE:             # <<<<<<<<<<<<<<
 *         free(process)
 *         return NULL  # Unable to get snapshot of process
 */
  __pyx_t_1 = ((__pyx_v_snapshot32 == INVALID_HANDLE_VALUE) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/process/process.pxd":44
 * 
 *     if snapshot32 == INVALID_HANDLE_VALUE:
 *         free(process)             # <<<<<<<<<<<<<<
 *         return NULL  # Unable to get snapshot of process
 * 
 */
    free(__pyx_v_process);

    /* "virtual_memory_toolkit/process/process.pxd":45
 *     if snapshot32 == INVALID_HANDLE_VALUE:
 *         free(process)
 *         return NULL  # Unable to get snapshot of process             # <<<<<<<<<<<<<<
 * 
 *     process[0].app_handle = app_handle
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/process/process.pxd":43
 *     )
 * 
 *     if snapshot32 == INVALID_HANDLE_VALUE:             # <<<<<<<<<<<<<<
 *         free(process)
 *         return NULL  # Unable to get snapshot of process
 */
  }

  /* "virtual_memory_toolkit/process/process.pxd":47
 *         return NULL  # Unable to get snapshot of process
 * 
 *     process[0].app_handle = app_handle             # <<<<<<<<<<<<<<
 *     process[0].loaded_modules = CollectAllModuleInformation(snapshot32)
 *     if not process[0].loaded_modules:
 */
  (__pyx_v_process[0]).app_handle = __pyx_v_app_handle;

  /* "virtual_memory_toolkit/process/process.pxd":48
 * 
 *     process[0].app_handle = app_handle
 *     process[0].loaded_modules = CollectAllModuleInformation(snapshot32)             # <<<<<<<<<<<<<<
 *     if not process[0].loaded_modules:
 *         free(process)
 */
  (__pyx_v_process[0]).loaded_modules = __pyx_f_22virtual_memory_toolkit_7windows_12windows_defs_CollectAllModuleInformation(__pyx_v_snapshot32);

  /* "virtual_memory_toolkit/process/process.pxd":49
 *     process[0].app_handle = app_handle
 *     process[0].loaded_modules = CollectAllModuleInformation(snapshot32)
 *     if not process[0].loaded_modules:             # <<<<<<<<<<<<<<
 *         free(process)
 *         return NULL  # Failed to collect module information
 */
  __pyx_t_1 = ((!((__pyx_v_process[0]).loaded_modules != 0)) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/process/process.pxd":50
 *     process[0].loaded_modules = CollectAllModuleInformation(snapshot32)
 *     if not process[0].loaded_modules:
 *         free(process)             # <<<<<<<<<<<<<<
 *         return NULL  # Failed to collect module information
 * 
 */
    free(__pyx_v_process);

    /* "virtual_memory_toolkit/process/process.pxd":51
 *     if not process[0].loaded_modules:
 *         free(process)
 *         return NULL  # Failed to collect module information             # <<<<<<<<<<<<<<
 * 
 *     process[0].image_filename = <char*>malloc(sizeof(char) * MAX_PATH)
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/process/process.pxd":49
 *     process[0].app_handle = app_handle
 *     process[0].loaded_modules = CollectAllModuleInformation(snapshot32)
 *     if not process[0].loaded_modules:             # <<<<<<<<<<<<<<
 *         free(process)
 *         return NULL  # Failed to collect module information
 */
  }

  /* "virtual_memory_toolkit/process/process.pxd":53
 *         return NULL  # Failed to collect module information
 * 
 *     process[0].image_filename = <char*>malloc(sizeof(char) * MAX_PATH)             # <<<<<<<<<<<<<<
 *     if not process[0].image_filename:
 *         free(process[0].loaded_modules)
 */
  (__pyx_v_process[0]).image_filename = ((char *)malloc(((sizeof(char)) * MAX_PATH)));

  /* "virtual_memory_toolkit/process/process.pxd":54
 * 
 *     process[0].image_filename = <char*>malloc(sizeof(char) * MAX_PATH)
 *     if not process[0].image_filename:             # <<<<<<<<<<<<<<
 *         free(process[0].loaded_modules)
 *         free(process)
 */
  __pyx_t_1 = ((!((__pyx_v_process[0]).image_filename != 0)) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/process/process.pxd":55
 *     process[0].image_filename = <char*>malloc(sizeof(char) * MAX_PATH)
 *     if not process[0].image_filename:
 *         free(process[0].loaded_modules)             # <<<<<<<<<<<<<<
 *         free(process)
 *         return NULL  # Memory allocation failed
 */
    free((__pyx_v_process[0]).loaded_modules);

    /* "virtual_memory_toolkit/process/process.pxd":56
 *     if not process[0].image_filename:
 *         free(process[0].loaded_modules)
 *         free(process)             # <<<<<<<<<<<<<<
 *         return NULL  # Memory allocation failed
 * 
 */
    free(__pyx_v_process);

    /* "virtual_memory_toolkit/process/process.pxd":57
 *         free(process[0].loaded_modules)
 *         free(process)
 *         return NULL  # Memory allocation failed             # <<<<<<<<<<<<<<
 * 
 *     if not GetProcessImageFileNameA(
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/process/process.pxd":54
 * 
 *     process[0].image_filename = <char*>malloc(sizeof(char) * MAX_PATH)
 *     if not process[0].image_filename:             # <<<<<<<<<<<<<<
 *         free(process[0].loaded_modules)
 *         free(process)
 */
  }

  /* "virtual_memory_toolkit/process/process.pxd":59
 *         return NULL  # Memory allocation failed
 * 
 *     if not GetProcessImageFileNameA(             # <<<<<<<<<<<<<<
 *         app_handle[0].process_handle,
 *         process[0].image_filename,
 */
  __pyx_t_1 = ((!(GetProcessImageFileNameA((__pyx_v_app_handle[0]).process_handle, (__pyx_v_process[0]).image_filename, MAX_PATH) != 0)) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/process/process.pxd":64
 *         MAX_PATH
 *     ):
 *         free(process[0].image_filename)             # <<<<<<<<<<<<<<
 *         free(process[0].loaded_modules)
 *         free(process)
 */
    free((__pyx_v_process[0]).image_filename);

    /* "virtual_memory_toolkit/process/process.pxd":65
 *     ):
 *         free(process[0].image_filename)
 *         free(process[0].loaded_modules)             # <<<<<<<<<<<<<<
 *         free(process)
 *         return NULL  # Unable to get process file name
 */
    free((__pyx_v_process[0]).loaded_modules);

    /* "virtual_memory_toolkit/process/process.pxd":66
 *         free(process[0].image_filename)
 *         free(process[0].loaded_modules)
 *         free(process)             # <<<<<<<<<<<<<<
 *         return NULL  # Unable to get process file name
 * 
 */
    free(__pyx_v_process);

    /* "virtual_memory_toolkit/process/process.pxd":67
 *         free(process[0].loaded_modules)
 *         free(process)
 *         return NULL  # Unable to get process file name             # <<<<<<<<<<<<<<
 * 
 *     return process
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "virtual_memory_toolkit/process/process.pxd":59
 *         return NULL  # Memory allocation failed
 * 
 *     if not GetProcessImageFileNameA(             # <<<<<<<<<<<<<<
 *         app_handle[0].process_handle,
 *         process[0].image_filename,
 */
  }

  /* "virtual_memory_toolkit/process/process.pxd":69
 *         return NULL  # Unable to get process file name
 * 
 *     return process             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_process;
  goto __pyx_L0;

  /* "virtual_memory_toolkit/process/process.pxd":23
 * 
 * 
 * cdef inline CProcess* CProcess_init(CAppHandle* app_handle) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Creates a new CProcess instance and populates its fields.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "virtual_memory_toolkit/process/process.pxd":72
 * 
 * 
 * cdef inline void CProcess_free(CProcess* process) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Frees the memory allocated for a CProcess instance.
 */

static CYTHON_INLINE void __pyx_f_22virtual_memory_toolkit_7process_7process_CProcess_free(CProcess *__pyx_v_process) {
  int __pyx_t_1;

  /* "virtual_memory_toolkit/process/process.pxd":79
 *         process (CProcess*): The CProcess instance to be freed.
 *     """
 *     if not process:             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_process != 0)) != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/process/process.pxd":80
 *     """
 *     if not process:
 *         return             # <<<<<<<<<<<<<<
 * 
 *     if process[0].loaded_modules:
 */
    goto __pyx_L0;

    /* "virtual_memory_toolkit/process/process.pxd":79
 *         process (CProcess*): The CProcess instance to be freed.
 *     """
 *     if not process:             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  }

  /* "virtual_memory_toolkit/process/process.pxd":82
 *         return
 * 
 *     if process[0].loaded_modules:             # <<<<<<<<<<<<<<
 *         free(process[0].loaded_modules)
 *     if process[0].image_filename:
 */
  __pyx_t_1 = ((__pyx_v_process[0]).loaded_modules != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/process/process.pxd":83
 * 
 *     if process[0].loaded_modules:
 *         free(process[0].loaded_modules)             # <<<<<<<<<<<<<<
 *     if process[0].image_filename:
 *         free(process[0].image_filename)
 */
    free((__pyx_v_process[0]).loaded_modules);

    /* "virtual_memory_toolkit/process/process.pxd":82
 *         return
 * 
 *     if process[0].loaded_modules:             # <<<<<<<<<<<<<<
 *         free(process[0].loaded_modules)
 *     if process[0].image_filename:
 */
  }

  /* "virtual_memory_toolkit/process/process.pxd":84
 *     if process[0].loaded_modules:
 *         free(process[0].loaded_modules)
 *     if process[0].image_filename:             # <<<<<<<<<<<<<<
 *         free(process[0].image_filename)
 *     free(process)
 */
  __pyx_t_1 = ((__pyx_v_process[0]).image_filename != 0);
  if (__pyx_t_1) {

    /* "virtual_memory_toolkit/process/process.pxd":85
 *         free(process[0].loaded_modules)
 *     if process[0].image_filename:
 *         free(process[0].image_filename)             # <<<<<<<<<<<<<<
 *     free(process)
 */
    free((__pyx_v_process[0]).image_filename);

    /* "virtual_memory_toolkit/process/process.pxd":84
 *     if process[0].loaded_modules:
 *         free(process[0].loaded_modules)
 *     if process[0].image_filename:             # <<<<<<<<<<<<<<
 *         free(process[0].image_filename)
 *     free(process)
 */
  }

  /* "virtual_memory_toolkit/process/process.pxd":86
 *     if process[0].image_filename:
 *         free(process[0].image_filename)
 *     free(process)             # <<<<<<<<<<<<<<
 */
  free(__pyx_v_process);

  /* "virtual_memory_toolkit/process/process.pxd":72
 * 
 * 
 * cdef inline void CProcess_free(CProcess* process) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Frees the memory allocated for a CProcess instance.
 */

  /* function exit code */
  __pyx_L0:;
}

static PyMethodDef __pyx_methods[] = {
  {"run", (PyCFunction)__pyx_pw_4test_12test_process_3run, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_test_process(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_test_process},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "test_process",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_C_Windows_System32_notepad_exe, __pyx_k_C_Windows_System32_notepad_exe, sizeof(__pyx_k_C_Windows_System32_notepad_exe), 0, 0, 1, 0},
  {&__pyx_n_s_FAILED, __pyx_k_FAILED, sizeof(__pyx_k_FAILED), 0, 0, 1, 1},
  {&__pyx_kp_s_Failed_to_allocate_modules_array, __pyx_k_Failed_to_allocate_modules_array, sizeof(__pyx_k_Failed_to_allocate_modules_array), 0, 0, 1, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s_PASSED, __pyx_k_PASSED, sizeof(__pyx_k_PASSED), 0, 0, 1, 1},
  {&__pyx_n_s_Popen, __pyx_k_Popen, sizeof(__pyx_k_Popen), 0, 0, 1, 1},
  {&__pyx_kp_s_Running_Process_Tests, __pyx_k_Running_Process_Tests, sizeof(__pyx_k_Running_Process_Tests), 0, 0, 1, 0},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_kp_s_create_notepad_cprocess, __pyx_k_create_notepad_cprocess, sizeof(__pyx_k_create_notepad_cprocess), 0, 0, 1, 0},
  {&__pyx_n_s_create_notepad_instance, __pyx_k_create_notepad_instance, sizeof(__pyx_k_create_notepad_instance), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_kp_s_get_handle_to_notepad, __pyx_k_get_handle_to_notepad, sizeof(__pyx_k_get_handle_to_notepad), 0, 0, 1, 0},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_notepad_path, __pyx_k_notepad_path, sizeof(__pyx_k_notepad_path), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_sleep, __pyx_k_sleep, sizeof(__pyx_k_sleep), 0, 0, 1, 1},
  {&__pyx_n_s_subprocess, __pyx_k_subprocess, sizeof(__pyx_k_subprocess), 0, 0, 1, 1},
  {&__pyx_n_s_terminate, __pyx_k_terminate, sizeof(__pyx_k_terminate), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_test_test_process, __pyx_k_test_test_process, sizeof(__pyx_k_test_test_process), 0, 0, 1, 1},
  {&__pyx_kp_s_test_test_process_pyx, __pyx_k_test_test_process_pyx, sizeof(__pyx_k_test_test_process_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 78, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 311, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "virtual_memory_toolkit/windows/windows_defs.pxd":78
 *     if not modules:
 *         with gil:
 *             raise MemoryError("Failed to allocate modules array")             # <<<<<<<<<<<<<<
 * 
 *     me32.dwSize = sizeof(MODULEENTRY32)
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Failed_to_allocate_modules_array); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "test/test_process.pyx":8
 * import time
 * 
 * def create_notepad_instance():             # <<<<<<<<<<<<<<
 *     """
 *     Creates a new instance of Notepad by opening it using the specified path.
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_n_s_notepad_path); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__2, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_test_test_process_pyx, __pyx_n_s_create_notepad_instance, 8, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC inittest_process(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC inittest_process(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_test_process(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_test_process(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_test_process(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'test_process' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_test_process(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("test_process", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_test__test_process) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "test.test_process")) {
      if (unlikely(PyDict_SetItemString(modules, "test.test_process", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "test/test_process.pyx":5
 * 
 * 
 * import subprocess             # <<<<<<<<<<<<<<
 * import time
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_subprocess, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_subprocess, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "test/test_process.pyx":6
 * 
 * import subprocess
 * import time             # <<<<<<<<<<<<<<
 * 
 * def create_notepad_instance():
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_time, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "test/test_process.pyx":8
 * import time
 * 
 * def create_notepad_instance():             # <<<<<<<<<<<<<<
 *     """
 *     Creates a new instance of Notepad by opening it using the specified path.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4test_12test_process_1create_notepad_instance, NULL, __pyx_n_s_test_test_process); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_create_notepad_instance, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "test/test_process.pyx":1
 * from virtual_memory_toolkit.handles.handle cimport CAppHandle, CAppHandle_from_title_substring, CAppHandle_free             # <<<<<<<<<<<<<<
 * from virtual_memory_toolkit.process.process cimport CProcess, CProcess_init, CProcess_free
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "virtual_memory_toolkit/process/process.pxd":72
 * 
 * 
 * cdef inline void CProcess_free(CProcess* process) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Frees the memory allocated for a CProcess instance.
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init test.test_process", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init test.test_process");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* Print */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* PrintOne */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_BOOL(BOOL value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const BOOL neg_one = (BOOL) -1, const_zero = (BOOL) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(BOOL) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(BOOL) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(BOOL) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(BOOL) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(BOOL) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(BOOL),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned PY_LONG_LONG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned PY_LONG_LONG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned PY_LONG_LONG),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_As_unsigned_PY_LONG_LONG(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned PY_LONG_LONG) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned PY_LONG_LONG) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned PY_LONG_LONG) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) >= 2 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) >= 3 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) >= 4 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned PY_LONG_LONG) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned PY_LONG_LONG) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) ((((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) ((((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) ((((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned PY_LONG_LONG) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned PY_LONG_LONG val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned PY_LONG_LONG) -1;
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned PY_LONG_LONG) -1;
        val = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned PY_LONG_LONG");
    return (unsigned PY_LONG_LONG) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned PY_LONG_LONG");
    return (unsigned PY_LONG_LONG) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
